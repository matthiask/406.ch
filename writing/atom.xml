<?xml version='1.0' encoding='utf-8'?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom"><title>Matthias Kestenholz</title><link href="https://406.ch/writing/atom.xml" rel="self" /><link href="https://406.ch/" rel="alternate" /><id>https://406.ch/</id><updated>2023-08-11T12:00:00Z</updated><author><name>Matthias Kestenholz</name></author><entry><title>Composition over inheritance: The case for function-based views</title><link href="https://406.ch/writing/composition-over-inheritance-the-case-for-function-based-views/" rel="alternate" /><id>https://406.ch/writing/composition-over-inheritance-the-case-for-function-based-views/</id><published>2023-08-11T12:00:00Z</published><updated>2023-08-11T12:00:00Z</updated><summary type="html">&lt;h1&gt;Composition over inheritance: The case for function-based views&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://hachyderm.io/@matthiask/110814846128940975"&gt;A recent conversation with Carlton on Mastodon&lt;/a&gt; prompted me to write down some of my thoughts re. function- vs class-based views in Django.&lt;/p&gt;
&lt;h2&gt;The early days&lt;/h2&gt;
&lt;p&gt;When I started using Django some time after 0.96 and 1.0 all views were
function based. Except when you added a class with a &lt;code&gt;def __call__()&lt;/code&gt; method
yourself &amp;ndash; that was always possible but not really comparable to today&amp;rsquo;s
class-based views.&lt;/p&gt;
&lt;h2&gt;The introduction of class-based views&lt;/h2&gt;
&lt;p&gt;Class based views (both generic versions and the base &lt;code&gt;View&lt;/code&gt;) were introduced to Django in 2010. Judging from the &lt;a href="https://code.djangoproject.com/ticket/6735"&gt;ticket tracker&lt;/a&gt; the main motivation was to avoid adding yet another argument to the generic function-based views (GFBV) which were available in Django back then.&lt;/p&gt;
&lt;p&gt;The GFBV&amp;rsquo;s argument count was impressive. Two examples follow:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;object_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;slug_field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_name_field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;template_loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;context_processors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_object_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;archive_month&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date_field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;month_format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow_empty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context_processors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;template_object_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow_future&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The GFBVs where immediately when GCBVs were introduced and later removed in 2012.&lt;/p&gt;
&lt;p&gt;Class-based views have to be adapted by calling the &lt;code&gt;View.as_view()&lt;/code&gt; method; &lt;code&gt;as_view()&lt;/code&gt; returns arguably the thing which is viewed (sorry) as the view by Django, it&amp;rsquo;s the thing which gets called with a request and is expected to return a response. This thing in turn instantiates the view object once per request; this means that &lt;code&gt;self&lt;/code&gt; can be used to save request-specific data such as &lt;code&gt;self.request&lt;/code&gt;, &lt;code&gt;self.args&lt;/code&gt; but also custom attributes.&lt;/p&gt;
&lt;p&gt;The GCBV code is extremely factored and decomposed. The &lt;a href="https://ccbv.co,ul/"&gt;Classy Class-Based Views&lt;/a&gt; site mentions that the &lt;code&gt;UpdateView&lt;/code&gt; has 10 separate ancestors and its code is spread across three files. But, the view code for instantiating a model object and handling a form really isn&amp;rsquo;t that complex. Most of the complexity is handled by Django itself, in the request handler and in the &lt;code&gt;django.forms&lt;/code&gt; package. So, what&amp;rsquo;s the reason for all this?&lt;/p&gt;
&lt;h2&gt;Generic views could be simple&lt;/h2&gt;
&lt;p&gt;I wish that the existing generic views had better building blocks instead of a big hierarchy of mixins and multiple inheritance which is probably not understood by anyone without checking and re-checking the documentation, the code, or the excellent &lt;a href="https://ccbv.co.uk/"&gt;Classy Class-Based Views&lt;/a&gt;. Certainly not by me.&lt;/p&gt;
&lt;p&gt;In my ideal world, generic views would be composed of small reusable and composable functions which wuld cover 80% of use cases with 20% of the code. And if not, you could copy the whole code of the view, change or introduce a line or two and leave it at that. And since the functions do one thing (but do that well) you can immediately see what they are doing and why. You&amp;rsquo;d avoid the Hollywood Principle (Don&amp;rsquo;t call us, we&amp;rsquo;ll call you) in your code. Sure, your view is called by Django but you don&amp;rsquo;t have to introduce more and more layers of indirection.&lt;/p&gt;
&lt;p&gt;The internet is full of advice that you should prefer composition over inheritance. Let&amp;rsquo;s try to outline what generic views could look like if they followed the composition paradigm. Note that the goal isn&amp;rsquo;t to gain points by showing that the resulting code is shorter. One important goal is maintainability by being easier to understand. Another important goal is showing a better path from a beginner&amp;rsquo;s use of views to an experts understanding of everything underneath it by bridging the gap using more powerful building blocks which don&amp;rsquo;t leave all the minutiae to you if the defaults don&amp;rsquo;t work.&lt;/p&gt;
&lt;p&gt;Some repetition caused by copy pasting is fine. Not all identical three lines of code are the same. The &lt;a href="https://wiki.c2.com/?ThreeStrikesAndYouRefactor"&gt;Three Strikes And You Refactor&lt;/a&gt; rule&lt;sup id="fnref:wet"&gt;&lt;a class="footnote-ref" href="#fn:wet"&gt;1&lt;/a&gt;&lt;/sup&gt; leads to better and more maintainable code than following an extreme interpretation of the DRY (Don&amp;rsquo;t Repeat Yourself) principle.&lt;/p&gt;
&lt;h3&gt;ListView and DetailView&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m going to profit from Django&amp;rsquo;s shortcuts module and also from &lt;a href="https://feincms3.readthedocs.io/en/latest/ref/shortcuts.html"&gt;feincms3&amp;rsquo;s shortcuts module&lt;/a&gt; which offers functions for rendering pages for single objects or lists of objects. The &lt;code&gt;render_list&lt;/code&gt; and &lt;code&gt;render_detail&lt;/code&gt; functions implement the same way of determining the template paths as the generic views use (for example &lt;code&gt;&amp;lt;app_name&amp;gt;/&amp;lt;model_name&amp;gt;_detail.html&lt;/code&gt;) and the same way of naming context variables (&lt;code&gt;object&lt;/code&gt; and &lt;code&gt;&amp;lt;model_name&amp;gt;&lt;/code&gt; for the object, &lt;code&gt;object_list&lt;/code&gt; and &lt;code&gt;&amp;lt;model_name&amp;gt;_list&lt;/code&gt; for the list) as well as pagination but nothing more.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a possible minimal implementation of a list and detail object generic view:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# _get_queryset runs ._default_manager.all() on models and returns&lt;/span&gt;
&lt;span class="c1"&gt;# everything else as-is. It&amp;#39;s the secret sauce which allows using models,&lt;/span&gt;
&lt;span class="c1"&gt;# managers or querysets with get_object_or_404 and friends.&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_get_queryset&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;feincms3.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_detail&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;object_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paginate_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_get_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;paginate_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;paginate_by&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;object_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug_field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;slug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;slug_field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You want to change the way a single object is retrieved? You could do that easily but not by adding configuration-adjacent values in your URLconf but rather by adding a view yourself:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;article_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;articles/&amp;lt;year:int&amp;gt;/&amp;lt;slug:slug&amp;gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;article_detail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=...&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I don&amp;rsquo;t think that was much harder than a hypothetical alternative:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;articles/&amp;lt;year:int&amp;gt;/&amp;lt;slug:slug&amp;gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;object_detail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;model&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;object_kwargs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;slug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And think about the internal implementation of the &lt;code&gt;object_detail&lt;/code&gt; view. Viewed one additional feature at a time it may be fine but when adding up everything it would probably be quite gross.&lt;/p&gt;
&lt;p&gt;The additional benefit is that it shows beginners the way to intermediate skills &amp;ndash; writing views isn&amp;rsquo;t hard, and shouldn&amp;rsquo;t be.&lt;/p&gt;
&lt;p&gt;Finally, the official way of overriding &lt;code&gt;DetailView.get_object()&lt;/code&gt; (I think!) doesn&amp;rsquo;t look that good compared to the &lt;code&gt;def article_detail()&lt;/code&gt; view above:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;slug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Did you know that &lt;code&gt;get_object()&lt;/code&gt; has an optional queryset argument? I certainly didn&amp;rsquo;t. It seems to be used by the date-based generic views but they also have their own &lt;code&gt;get_object()&lt;/code&gt; implementation so who knows, really.&lt;/p&gt;
&lt;h2&gt;Detail view with additional behavior&lt;/h2&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;article_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FILES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CommentForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.#comments&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;comment_form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A counterexample would be to move the endpoint which accepts a comment POST
request somewhere else. But then you&amp;rsquo;d also have to keep the different
&lt;code&gt;CommentForm&lt;/code&gt; instantiations in sync.&lt;/p&gt;
&lt;p&gt;You could also override &lt;code&gt;get_context_data()&lt;/code&gt; to add the comment form to the
context and override &lt;code&gt;post()&lt;/code&gt; to instantiate check the form&amp;rsquo;s validity. But
then you&amp;rsquo;d have to make sure that an eventual invalid form is handled correctly
by &lt;code&gt;get_context_data()&lt;/code&gt;. It&amp;rsquo;s not hard but it certainly isn&amp;rsquo;t as
straightforward as the example above either.&lt;/p&gt;
&lt;p&gt;The custom view is the most obvious way of keeping the form instantiation in
one place.&lt;/p&gt;
&lt;h2&gt;Form views&lt;/h2&gt;
&lt;p&gt;Generic create and update views could look something like this, again reusing the shortcuts mentioned above:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_and_redirect_to_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_form_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Provide at least one of model and form_class&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;modelform_factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FILES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;object_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;save_and_redirect_to_object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_form_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;template_name_suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;object_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug_field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;slug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;save_and_redirect_to_object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;slug_field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_form_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;template_name_suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You want to redirect to a different URL and maybe emit a success message? Easy:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;article_form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Successfully updated the article.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;articles:list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&amp;lt;slug:slug&amp;gt;/update/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;object_update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;model&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;form_valid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;article_form_valid&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=...&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yes, these generic views wouldn&amp;rsquo;t allow overriding the case when a form was invalid. But, I&amp;rsquo;d assume that displaying the form with error messages is the right thing to do in 90% of the cases. And if not, write your own specific or generic view? After all, with the mentioned tools it won&amp;rsquo;t take up more than a few lines of straightforward code. (If the code was tricky it would be different. But views shouldn&amp;rsquo;t be tricky.)&lt;/p&gt;
&lt;p&gt;Adding more &lt;code&gt;form_valid&lt;/code&gt; handlers should be mostly painless. A few examples inspired by &lt;a href="https://docs.djangoproject.com/en/4.2/topics/class-based-views/generic-editing/"&gt;Django&amp;rsquo;s generic editing documentation&lt;/a&gt;:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_and_redirect_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/thanks/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_author_and_save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You could also couple the form a bit to the request and do something like:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;def&lt;/span&gt; &lt;span class="nv"&gt;process_form&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;request&lt;/span&gt;, &lt;span class="nv"&gt;form&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nv"&gt;form&lt;/span&gt;.&lt;span class="nv"&gt;process&lt;/span&gt;&lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;request&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sure, forms probably shouldn&amp;rsquo;t know much about requests. But then, Django is a framework for perfectionists &lt;em&gt;with deadlines&lt;/em&gt; and sometimes practicality beats purity.&lt;/p&gt;
&lt;h2&gt;Date-based generic views&lt;/h2&gt;
&lt;p&gt;I think I would want to offer a few analyzers which allow easily returning a
data structure suitable for rendering links for yearly, monthly, weekly or even
daily (who writes that much?) archives. The &lt;a href="https://docs.djangoproject.com/en/4.2/ref/models/querysets/#dates"&gt;&lt;code&gt;.dates()&lt;/code&gt; queryset
method&lt;/a&gt;
method should be a big help there.&lt;/p&gt;
&lt;p&gt;The archive views themselves are straightforward adaptations of the
&lt;code&gt;object_list&lt;/code&gt; view above.&lt;/p&gt;
&lt;p&gt;It may feel like leaving out the actually hard part but I&amp;rsquo;d have to be
convinced that this is actually a hard problem and not just a problem of making
basically arbitrary choices which people then adapt to and then think that this
is the way things should be since it&amp;rsquo;s the way things are.&lt;/p&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Some points this post could have made or tried to make are made much better by
Luke Plant in the guide &lt;a href="https://spookylukey.github.io/django-views-the-right-way/"&gt;Django Views - The Right
Way&lt;/a&gt;. I don&amp;rsquo;t
generally think that class-based views never make sense. I also don&amp;rsquo;t think
that people shouldn&amp;rsquo;t use the available tools. I just think that I, myself,
don&amp;rsquo;t want to use them, and I also think that I&amp;rsquo;m still happier with &lt;code&gt;lambda
request: HttpResponseRedirect(...)&lt;/code&gt; than with
&lt;code&gt;generic.RedirectView.as_view(url=...)&lt;/code&gt;. The point isn&amp;rsquo;t to compare the
character count. The point is: Does the &lt;code&gt;RedirectView&lt;/code&gt; cause a permanent or a
temporary redirect? I had to look it up for a long time, and then it changed.
The former is completely obvious.&lt;/p&gt;
&lt;h2&gt;Closing words&lt;/h2&gt;
&lt;p&gt;I know that people have strong opinions. I&amp;rsquo;m not interested in all of them. I&amp;rsquo;m
mostly interested in design critiques and arguments regarding the beginner to
intermediate skills argument. It&amp;rsquo;s fine if CBVs work fine for you, and there&amp;rsquo;s
no need to feel challenged by this post.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:wet"&gt;
&lt;p&gt;Also called the WET rule (Write Everything Twice). (Not coined by me.)&amp;#160;&lt;a class="footnote-backref" href="#fnref:wet" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Weeknotes (2023 week 30)</title><link href="https://406.ch/writing/weeknotes-2023-week-30/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-30/</id><published>2023-07-28T12:00:00Z</published><updated>2023-07-28T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes&lt;/h1&gt;
&lt;h2&gt;Async Django&lt;/h2&gt;
&lt;p&gt;I have used &lt;a href="https://channels.readthedocs.io/"&gt;Django Channels&lt;/a&gt; successfully in a few projects from 2017 to 2019. A few months back I have worked with &lt;a href="https://www.starlette.io/"&gt;Starlette&lt;/a&gt;. And now I have finally started digging into using Django itself with an ASGI server, and not just for one or two views but also including the middleware stack etc since I also need authentication, not just an endpoint forwarding requests to a remote server. I have looked at &lt;a href="https://github.com/emmett-framework/granian"&gt;Granian&lt;/a&gt;, an RSGI/ASGI server written in Rust. But for now I am using &lt;a href="https://www.uvicorn.org/"&gt;uvicorn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Django truly has come a long way but there&amp;rsquo;s much left to do. Django 5.0 is looking great already, but 4.2 misses many pieces still. I am really really glad Django wants to stay backwards compatible but I wish I could wave a magic wand and upgrade everything to async. Adding &lt;code&gt;a&lt;/code&gt; prefixes everywhere for the async version is certainly a good compromise and probably the way to go but it&amp;rsquo;s just not that nice.&lt;/p&gt;
&lt;p&gt;I have been playing around with making &lt;a href="https://feincms3.readthedocs.io/"&gt;feincms3&lt;/a&gt;&amp;rsquo;s applications middleware async compatible because I want the full middleware stack to be async. The code is already released but undocumented and not even mentioned in the changelog. So, feel free to play around with it but it&amp;rsquo;s not supposed to be stable or supported yet.&lt;/p&gt;
&lt;h2&gt;Releases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3/"&gt;feincms3 4.1&lt;/a&gt;: Switched to hatchling and ruff. Updated the feincms3-sites docs. Some async updates mentioned above. A Django 4.2 admin CSS update for the inline CKEditor.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-forms/"&gt;feincms3-forms 0.4&lt;/a&gt;: Switched to hatchling and ruff. Started defining default icons for the form fields &lt;a href="https://django-content-editor.readthedocs.io/"&gt;content editor&lt;/a&gt; plugins.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-ckeditor/"&gt;django-ckeditor 6.7&lt;/a&gt;: I&amp;rsquo;m still maintaining the CKEditor 4 integration for Django even though CKEditor 4 itself isn&amp;rsquo;t supported anymore. Minor updates to the editor itself and Pillow compatibility updates.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-cookiecontrol/"&gt;feincms3-cookiecontrol 1.3.2&lt;/a&gt;: The cookie banner doesn&amp;rsquo;t generate an empty &lt;code&gt;&amp;lt;div class="f3cc"&amp;gt;&lt;/code&gt; element anymore if there&amp;rsquo;s nothing to add inside (e.g. if the user only accepted necessary cookies).&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>How ruff changed my Python programming habits</title><link href="https://406.ch/writing/how-ruff-changed-my-python-programming-habits/" rel="alternate" /><id>https://406.ch/writing/how-ruff-changed-my-python-programming-habits/</id><published>2023-07-26T12:00:00Z</published><updated>2023-07-26T12:00:00Z</updated><summary type="html">&lt;h1&gt;How ruff changed my Python programming habits&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://beta.ruff.rs/"&gt;ruff&lt;/a&gt; isn&amp;rsquo;t just a faster replacement for flake8, isort
and friends.&lt;/p&gt;
&lt;p&gt;With other Python-based formatters and linters there&amp;rsquo;s always a trade off
between development speed (waiting on &lt;code&gt;git commit&lt;/code&gt; is very boring) and
strictness.&lt;/p&gt;
&lt;p&gt;ruff is so fast that enabling additional rules is practically free in terms of
speed; the only question is if those rules lead to better, or maybe just to
more correct and consistent code.&lt;/p&gt;
&lt;p&gt;I have long been using &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt;, and even longer
flake8, black, isort. I have written a piece about &lt;a href="https://406.ch/writing/flake8-and-value-standards/"&gt;flake8 and the value of
standards&lt;/a&gt; almost 9 years
ago and have continued moving in the mentioned direction ever since.&lt;/p&gt;
&lt;p&gt;These days I have enabled a wide variety of rules. I&amp;rsquo;m not sold on all of them
(looking at you, pylint) and I&amp;rsquo;m definitely not of the opinion that rules which
I&amp;rsquo;m not using currently are worthless. I didn&amp;rsquo;t even know most of these rules
before starting to use ruff, and ruff making them easy and painless to use
(without a measureable performance penalty) has certainly lead to me annoying
my coworkers with a growing set of enabled rules.&lt;/p&gt;
&lt;h2&gt;Rules&lt;/h2&gt;
&lt;p&gt;The current ruleset and some justifications for it follows.&lt;/p&gt;
&lt;h3&gt;pyflakes, pycodestyle&lt;/h3&gt;
&lt;p&gt;No justification necessary, really.&lt;/p&gt;
&lt;h3&gt;mccabe&lt;/h3&gt;
&lt;p&gt;I like the cyclomatic complexity checker, but I have relaxed it a bit. I find it very useful to avoid complex code, but some code is totally straightforward (e.g. building a queryset from a wide variety of query parameters) but still has many &lt;code&gt;if&lt;/code&gt; statements. I&amp;rsquo;d rather allow more complexity instead of sprinkling the code with &lt;code&gt;# noqa&lt;/code&gt; statements.&lt;/p&gt;
&lt;h3&gt;isort&lt;/h3&gt;
&lt;p&gt;Sorted imports are great.&lt;/p&gt;
&lt;h3&gt;pep8-naming&lt;/h3&gt;
&lt;p&gt;Mostly great except when it flags Django&amp;rsquo;s migration files. The filenames
always start with numbers and that&amp;rsquo;s obviously not a valid Python module name,
but it&amp;rsquo;s not supposed to be.&lt;/p&gt;
&lt;h3&gt;pyupgrade&lt;/h3&gt;
&lt;p&gt;pyupgrade is totally awesome.&lt;/p&gt;
&lt;h3&gt;flake-2020&lt;/h3&gt;
&lt;p&gt;Avoiding non future-proof uses of &lt;code&gt;sys.version&lt;/code&gt; and &lt;code&gt;sys.version_info&lt;/code&gt; is a good idea, no questions about that.&lt;/p&gt;
&lt;h3&gt;flake8-boolean-trap&lt;/h3&gt;
&lt;p&gt;Sometimes annoying, mostly useful. I don&amp;rsquo;t like that the plugin flags e.g. &lt;code&gt;with_tree_fields(True)&lt;/code&gt; or &lt;code&gt;with_tree_fields(False)&lt;/code&gt; because I don&amp;rsquo;t think this could be possibly misread. But, apart from these edge cases it really is a good idea, especially since keyword-only arguments exist and those aren&amp;rsquo;t flagged by this rule.&lt;/p&gt;
&lt;h3&gt;flake8-bugbear&lt;/h3&gt;
&lt;p&gt;Mostly useful. I have disabled the &lt;code&gt;zip()&lt;/code&gt; without &lt;code&gt;strict=&lt;/code&gt; warning.&lt;/p&gt;
&lt;h3&gt;flake8-comprehensions&lt;/h3&gt;
&lt;p&gt;Checks for unnecessary conversions between generators and lists, sets, tuples or dicts.&lt;/p&gt;
&lt;h3&gt;flake8-django&lt;/h3&gt;
&lt;p&gt;I actually like consistency. I also like flagging &lt;code&gt;fields = "__all__"&lt;/code&gt;, but this check shouldn&amp;rsquo;t trigger in admin &lt;code&gt;ModelForm&lt;/code&gt; classes, really. I probably have to add another entry to &lt;code&gt;[tool.ruff.per-file-ignores]&lt;/code&gt; for this.&lt;/p&gt;
&lt;h3&gt;flake8-pie&lt;/h3&gt;
&lt;p&gt;Quite a random assortment of rules. I like the &lt;code&gt;no-unnecessary-pass&lt;/code&gt; and &lt;code&gt;no-pointless-statements&lt;/code&gt; rules, among others.&lt;/p&gt;
&lt;h3&gt;flake8-simplify&lt;/h3&gt;
&lt;p&gt;Nice simplifications. I&amp;rsquo;m not sure if ternary opeartors are always a plus, especially since they hide the branching from &lt;a href="https://pypi.org/project/coverage/"&gt;coverage&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;flake8-gettext&lt;/h3&gt;
&lt;p&gt;Enormously useful and important. I don&amp;rsquo;t know how many times I have encountered broken code like &lt;code&gt;gettext("Hello {name}".format(name=name))&lt;/code&gt; instead of &lt;code&gt;gettext("Hello {name}").format(name=name)&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;pygrep-hooks&lt;/h3&gt;
&lt;p&gt;Avoids &lt;code&gt;eval()&lt;/code&gt;. Avoids blanket &lt;code&gt;# noqa&lt;/code&gt; rules (always be specific!)&lt;/p&gt;
&lt;h3&gt;pylint&lt;/h3&gt;
&lt;p&gt;I have been using all pylint rules for some time. The pylint refactoring rules (&lt;code&gt;PLR&lt;/code&gt;) did prove to be very annoying so I have reverted to only enabling errors and warnings.&lt;/p&gt;
&lt;p&gt;The two main offenders were PLR0913 (too many arguments) and PLR2004 (magic value comparison). The former would be fine if it would count keyword-only arguments differently; it&amp;rsquo;s certainly a good idea to avoid too many positional parameters, I don&amp;rsquo;t think keyword-only parameters are that bad. The latter is bad because often the magic value is really obvious. If you&amp;rsquo;re writing code for the web you shouldn&amp;rsquo;t have to use constants for the &lt;code&gt;200&lt;/code&gt; or &lt;code&gt;404&lt;/code&gt; status codes; one can assume that they are well known.&lt;/p&gt;
&lt;h3&gt;RUF100&lt;/h3&gt;
&lt;p&gt;Ruff is able to automatically remove &lt;code&gt;# noqa&lt;/code&gt; statements which don&amp;rsquo;t actually silence any warnings. That&amp;rsquo;s a great feature to have.&lt;/p&gt;
&lt;h2&gt;Line length&lt;/h2&gt;
&lt;p&gt;Yes, let&amp;rsquo;s go there. I still don&amp;rsquo;t use longer lines than +/- 80 characters, but
I have disabled all line length warnings these days. I don&amp;rsquo;t want to be warned
because I didn&amp;rsquo;t break a string across lines.&lt;/p&gt;
&lt;h2&gt;Rules I don&amp;rsquo;t like&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;flake8-builtins: Too many boring warnings. I didn&amp;rsquo;t even want to know that
  &lt;code&gt;copyright&lt;/code&gt; is a Python builtin.&lt;/li&gt;
&lt;li&gt;flake8-logging-format: Not generally helpful. Avoiding different exception strings so that e.g. &lt;a href="https://sentry.io/welcome/"&gt;Sentry&lt;/a&gt; can group exceptions more easily is a good idea, but the rule generated so many false positives as to be not useful anymore.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Final words (for now)&lt;/h2&gt;
&lt;p&gt;I really hope that Black is integrated into ruff one day.&lt;/p&gt;
&lt;p&gt;Also, I hope that ESLint and prettier will be replaced by a faster tool. I have my eyes on a few alternatives, but they are not there yet for my use cases.&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 29)</title><link href="https://406.ch/writing/weeknotes-2023-week-29/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-29/</id><published>2023-07-21T12:00:00Z</published><updated>2023-07-21T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes&lt;/h1&gt;
&lt;p&gt;I have mainly done work in private projects this week. Not much to talk about.
Except for the ZIP file &lt;code&gt;content-type&lt;/code&gt; bug which was interesting enough to
justify &lt;a href="https://406.ch/writing/serving-zip-files-using-django/"&gt;its own blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Releases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-cabinet/"&gt;django-cabinet 0.13&lt;/a&gt;: I converted
  the package to use ruff, hatchling; started running CI tests using Python
  3.11. The internals of the Django admin&amp;rsquo;s filters have changed to allow
  multi-valued filters, this has required some changes to the implementation of
  the folder filter. I opted to using a relatively ugly &lt;code&gt;django.VERSION&lt;/code&gt;
  hack; but that&amp;rsquo;s not too bad since such branches will be automatically
  removed by the awesome
  &lt;a href="https://github.com/adamchainz/django-upgrade"&gt;django-upgrade&lt;/a&gt;. I would have
  tried finding other ways in the past but now that old compatibility code can
  be removed by a single run of &lt;code&gt;django-upgrade&lt;/code&gt; (respectively
  &lt;code&gt;pre-commit&lt;/code&gt;) there really is no point to doing it in a different way.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Serving ZIP files using Django</title><link href="https://406.ch/writing/serving-zip-files-using-django/" rel="alternate" /><id>https://406.ch/writing/serving-zip-files-using-django/</id><published>2023-07-18T12:00:00Z</published><updated>2023-07-18T12:00:00Z</updated><summary type="html">&lt;h1&gt;Serving ZIP files using Django&lt;/h1&gt;
&lt;p&gt;I have generated ZIP files on the fly and served them using Django for a time.
Serving ZIP files worked well until it didn&amp;rsquo;t and browsing StackOverflow etc.
didn&amp;rsquo;t produce clear answers either. The development server worked fine, but
gunicorn/nginx didn&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;In the end, I had to change &lt;code&gt;content_type="application/zip"&lt;/code&gt; to
&lt;code&gt;content_type="application/x-zip-compressed"&lt;/code&gt;. I still don&amp;rsquo;t know what changed
and I have only theories why that&amp;rsquo;s necessary, but maybe it helps someone else.
Sometimes it&amp;rsquo;s better to be dumber about it.&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 28)</title><link href="https://406.ch/writing/weeknotes-2023-week-28/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-28/</id><published>2023-07-12T12:00:00Z</published><updated>2023-07-12T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 28)&lt;/h1&gt;&lt;h2&gt;Releases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/html-sanitizer/"&gt;html-sanitizer 2.2&lt;/a&gt;: Made the
  sanitizer&amp;rsquo;s configuration initialization more strict. Strings cannot be used
  anymore in places where the sanitizer expects a set (resp. any iterable).
  It&amp;rsquo;s useful that strings are iterable in Python and I wouldn&amp;rsquo;t want to change
  that, but the fact that &lt;code&gt;("class")&lt;/code&gt; is a string and not a tuple makes me sad.
  The fact that tuples are created by &lt;code&gt;,&lt;/code&gt; and not by &lt;code&gt;()&lt;/code&gt; will always trip up
  people.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-language-sites/"&gt;feincms3-language-sites
  0.1&lt;/a&gt;: The version number
  is wrong but whatever. I&amp;rsquo;m certainly happy with the state of things. The big
  change in 0.1 is that &lt;code&gt;Page.get_absolute_url&lt;/code&gt; no longer generates
  protocol-relative URLs. Depending on the value of &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; it
  automatically prepends either &lt;code&gt;http:&lt;/code&gt; or &lt;code&gt;https:&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-authlib/"&gt;django-authlib 0.15&lt;/a&gt;:
  django-authlib&amp;rsquo;s admin Single Sign On module now supports a hook to
  automatically create staff users when a matching user doesn&amp;rsquo;t exist already.
  I don&amp;rsquo;t plan to use this functionality myself and I have recommended people
  to implement the functionality themselves using the tools in django-authlib
  if they need it, but the change was so small and well-contained that adding
  it to the core made sense to me.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;pipx inject&lt;/h2&gt;
&lt;p&gt;We learned that &lt;a href="https://pypa.github.io/pipx/"&gt;pipx&lt;/a&gt; seems to remember injected
packages even across &lt;code&gt;pipx reinstall&lt;/code&gt; invocations. Not too surprising now that
we know it, but we certainly spent some time scratching our heads. &lt;code&gt;pipx
uninject&lt;/code&gt; was the thing we needed to stop pipx from installing an old version
of a dependency instead of the one being specified in &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;hatchling and data files&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m very confused by the way &lt;a href="https://hatch.pypa.io/"&gt;hatchling&lt;/a&gt; sometimes
includes data files and sometimes it doesn&amp;rsquo;t. I had to add &lt;code&gt;[tool.hatch.build]
include=["authlib/"]&lt;/code&gt; to &lt;a href="https://github.com/matthiask/django-authlib/commit/67d4673e4039eac277b5d2557c0736c1f01442ac"&gt;django-authlib&amp;rsquo;s &lt;code&gt;pyproject.toml&lt;/code&gt;
file&lt;/a&gt;
to make it include HTML files from subpackages. Maybe the subpackages are the
reason, but I&amp;rsquo;m not sure.&lt;/p&gt;
&lt;h2&gt;Payment providers that must not be named&lt;/h2&gt;
&lt;p&gt;I have spent hours and hours battling with the badly documented, incomplete,
inconsistent and confusing API of a (not that well known) payment provider
based in Switzerland. I&amp;rsquo;m surprised that this still happens years and years
after Stripe started offering a really well thought out and documented API
geared towards programmers. It&amp;rsquo;s really sad because when the same structure is
named with differing naming conventions (e.g. &lt;code&gt;snake_case&lt;/code&gt; vs. &lt;code&gt;camelCase&lt;/code&gt;) in
different parts of the API you just know that somebody spent too much time
writing too much code instead of reusing already existing functionality.&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 26)</title><link href="https://406.ch/writing/weeknotes-2023-week-26/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-26/</id><published>2023-06-30T12:00:00Z</published><updated>2023-06-30T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 26)&lt;/h1&gt;&lt;h2&gt;Releases&lt;/h2&gt;
&lt;p&gt;I released updates to a few of my packages; I have continued converting packages to &lt;a href="https://hatch.pypa.io"&gt;hatchling&lt;/a&gt; and &lt;a href="https://github.com/astral-sh/ruff"&gt;ruff&lt;/a&gt; while doing that.&lt;/p&gt;
&lt;p&gt;New releases in the last two weeks include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-tree-queries/"&gt;django-tree-queries 0.15&lt;/a&gt;: Added a new function, &lt;code&gt;.without_tree_fields()&lt;/code&gt; to the queryset which can be used to avoid the &lt;code&gt;.with_tree_fields(False)&lt;/code&gt; boolean trap warning.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-cookiecontrol/"&gt;feincms3-cookiecontrol 1.3.1&lt;/a&gt;: This small update allows replacing the feincms3 &lt;a href="https://noembed.com"&gt;noembed.com&lt;/a&gt; oEmbed code using other libraries such as &lt;a href="https://github.com/coleifer/micawber/"&gt;micawber&lt;/a&gt; which support a wider range of URLs while still gating the embed behind users&amp;rsquo; explicit consent.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-downloads/"&gt;feincms3-downloads 0.5.3&lt;/a&gt;: Updated translations.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-ckeditor/"&gt;django-ckeditor 6.6.1&lt;/a&gt;: Updated the bundled CKEditor 4 and merged a pull request adding better integration with Django admin&amp;rsquo;s dark mode.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-js-asset/"&gt;django-js-asset 2.1&lt;/a&gt;: Just basic maintainability and packaging updates. The &lt;code&gt;JS()&lt;/code&gt; implementation itself is untouched since February 2022.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/html-sanitizer/"&gt;html-sanitizer 2.0&lt;/a&gt;: Not really a backwards incompatible change (at least not according to the tests); I just wanted to avoid &lt;code&gt;1.10&lt;/code&gt; and go directly to &lt;code&gt;2.0&lt;/code&gt; this time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;GitHub projects&lt;/h2&gt;
&lt;p&gt;We are using GitHub project boards more and more. It definitely isn&amp;rsquo;t the most versatile way of managing projects but it sort-of hits the sweet spot for us. [I&amp;rsquo;m mostly happy with it, and it seems to me that applying &lt;a href="https://en.wikipedia.org/wiki/Rule_of_least_power"&gt;the rule of least power&lt;/a&gt; to project management software may not be such a bad idea after all.&lt;/p&gt;
&lt;p&gt;The built-in workflows are a bit boring and limited; especially the fact that it seems impossible to automatically add issues to the project when using multiple repositories. Luckily, &lt;a href="https://github.com/actions/add-to-project"&gt;actions/add-to-project&lt;/a&gt; exists so that&amp;rsquo;s not really a big problem.&lt;/p&gt;
&lt;h2&gt;To cloud or not&lt;/h2&gt;
&lt;p&gt;I had a long discussion with a colleague about containerization, Kubernetes, self-hosting, etc. etc. and I still don&amp;rsquo;t know where I stand. I can honestly say that the old way of hosting (ca. 2010) still works fine. I worry about the deterioriation of service quality we&amp;rsquo;re seeing and sometimes I really would like to have root to apply quick fixes where now I have to jump to hoops just to get what I already know I need. Annoying. But migrations are annoying as well.&lt;/p&gt;
&lt;h2&gt;Scheduled publishing&lt;/h2&gt;
&lt;p&gt;I augmented the script generating this website with scheduled publishing support while again reducing the number of lines in the file. The code is still formatted using black and ruff, while only ignoring line-length errors (I do this everywhere now to avoid breaking up long strings, not to put much code onto single lines) and allowing named lambdas. The weeknotes from two weeks ago where published by GitHub actions&amp;rsquo; cron scheduling support.&lt;/p&gt;
&lt;h2&gt;I like programming more than writing (even though I like writing)&lt;/h2&gt;
&lt;p&gt;I notice that writing is the first thing I start skipping when I have to
prioritize. Programming, biking, gardening come first. That&amp;rsquo;s fine, really. But
I&amp;rsquo;m still a bit sad that I do not manage to at least put out a short weekly
weeknotes entry.&lt;/p&gt;</summary></entry><entry><title>FeinCMS is a dead end (but feincms3 is not)</title><link href="https://406.ch/writing/feincms-is-a-dead-end-but-feincms3-is-not/" rel="alternate" /><id>https://406.ch/writing/feincms-is-a-dead-end-but-feincms3-is-not/</id><published>2023-06-19T12:00:00Z</published><updated>2023-06-19T12:00:00Z</updated><summary type="html">&lt;h1&gt;FeinCMS is a dead end (but feincms3 is not)&lt;/h1&gt;
&lt;p&gt;I wouldn&amp;rsquo;t encourage people to start new sites with FeinCMS. Five years ago I wrote that &lt;a href="https://406.ch/writing/the-future-of-feincms/"&gt;FeinCMS is used in a few flagship projects which we’re still actively developing, which means that FeinCMS won’t be going away for years to come.&lt;/a&gt; That&amp;rsquo;s still true but less and less so. We&amp;rsquo;re actively moving away from FeinCMS where we can, mostly towards feincms3 and django-content-editor.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://406.ch/writing/the-other-future-of-feincms-django-content-editor-and-feincms3/"&gt;FeinCMS lives on in django-content-editor and feincms3&lt;/a&gt;; not only in spirit but also in (code) history, since django-content-editor contains the whole history of FeinCMS up to and including the beginning of 2016.&lt;/p&gt;
&lt;p&gt;The implementation of FeinCMS is too expensive to clean up without breaking backwards compatibility. I still wish I had pursued an incremental way back then which would have allowed us to evolve old projects to the current best way of doing things (tm), but it didn&amp;rsquo;t happen and I&amp;rsquo;m not shedding too many tears about that since I&amp;rsquo;m quite happy with where we&amp;rsquo;re at today.&lt;/p&gt;
&lt;p&gt;That basically means that I won&amp;rsquo;t put any effort into &lt;a href="https://406.ch/writing/bringing-feincms-and-django-content-editorfeincms3-closer-together/"&gt;bringing FeinCMS and django-content-editor closer together&lt;/a&gt;. I haven&amp;rsquo;t spent much time on that anyway but now my mind is made up that this wouldn&amp;rsquo;t be time well spent. That being said, some of the items mentioned in the blog post linked above are available in django-content-editor now.&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 24)</title><link href="https://406.ch/writing/weeknotes-2023-week-24/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-24/</id><published>2023-06-16T12:00:00Z</published><updated>2023-06-16T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 24)&lt;/h1&gt;&lt;p&gt;Life happened and I missed a month of weeknotes. Oh well.&lt;/p&gt;
&lt;h2&gt;django-debug-toolbar 4.1&lt;/h2&gt;
&lt;p&gt;We have released &lt;a href="https://pypi.org/project/django-debug-toolbar/"&gt;django-debug-toolbar
4.1&lt;/a&gt;. Another cycle where I
mostly contributed reviews and not much else. Feels great :-)&lt;/p&gt;
&lt;h2&gt;Going all in on hatch and hatchling&lt;/h2&gt;
&lt;p&gt;I got to know hatch because django-debug-toolbar was converted to it. I was
confused as probably anyone else with the new state of packaging in Python
world. After listening to a few Podcasts (for example &lt;a href="https://talkpython.fm/episodes/show/408/hatch-a-modern-python-workflow"&gt;Hatch: A Modern Python
Workflow&lt;/a&gt;)
I did bite the bullet and started converting projects to hatch as mentioned
&lt;a href="https://406.ch/writing/weeknotes-2023-week-13-and-14/"&gt;some time ago&lt;/a&gt;. I have
converted a few other projects in the meantime because the development
experience is nicer. Not much, but enough to make it worthwile.
&lt;a href="https://pypi.org/project/feincms3-sites/"&gt;feincms3-sites&lt;/a&gt; is the latest
package I converted.&lt;/p&gt;
&lt;h2&gt;CKEditor 5&amp;rsquo;s new license and django-ckeditor&lt;/h2&gt;
&lt;p&gt;The pressure is on to maybe switch away from CKEditor 4 since it probably will not be supported after &lt;a href="https://support.ckeditor.com/hc/en-us/articles/115005281629-How-long-will-CKEditor-4-be-supported-"&gt;June 2023&lt;/a&gt;. It&amp;rsquo;s totally understandable that the CKEditor 5 license isn&amp;rsquo;t the same as before, but I&amp;rsquo;m not sure what that means for the Django integration &lt;a href="https://github.com/django-ckeditor/django-ckeditor/issues/482"&gt;django-ckeditor&lt;/a&gt; which I&amp;rsquo;m maintaining since a few years. I don&amp;rsquo;t actually like the new capabilities of CKEditor all that much and don&amp;rsquo;t intend to use them; maybe it would be better to use a build of &lt;a href=""&gt;ProseMirror&lt;/a&gt; in the CMS since &lt;a href="https://django-content-editor.readthedocs.io/en/latest/#about-rich-text-editors"&gt;we&amp;rsquo;re intentionally only using a very small subset of the features most rich text editors offer&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Mountain biking.&lt;/h2&gt;
&lt;p&gt;My mountain bike is repaired, I&amp;rsquo;m back on the trail.&lt;/p&gt;</summary></entry><entry><title>CSS variables and immutability</title><link href="https://406.ch/writing/css-variables-and-immutability/" rel="alternate" /><id>https://406.ch/writing/css-variables-and-immutability/</id><published>2023-06-14T12:00:00Z</published><updated>2023-06-14T12:00:00Z</updated><summary type="html">&lt;h1&gt;Using CSS variables&lt;sup id="fnref:variables"&gt;&lt;a class="footnote-ref" href="#fn:variables"&gt;1&lt;/a&gt;&lt;/sup&gt; to ship customizable CSS in Django apps&lt;/h1&gt;
&lt;p&gt;I have been working with &lt;a href="https://sass-lang.com/"&gt;SASS&lt;/a&gt; for a long time but
have been moving towards writing CSS with a few &lt;a href="https://postcss.org/"&gt;PostCSS&lt;/a&gt;
goodies in the last years. At first, I just replaced the &lt;code&gt;$...&lt;/code&gt; with
&lt;code&gt;var(--...)&lt;/code&gt; and didn&amp;rsquo;t think much about it. The realization that CSS variables
can be more than that came later. Edit basic values directly in the browser and
immediately see the results! Change CSS depending on media queries or the
cascade!&lt;/p&gt;
&lt;p&gt;With all that power came back the wish to not just ship backend and HTML code
in Django apps I (help) maintain but also reusable CSS, with a few overrideable
CSS variables for basic changes to the visual style. Loading &lt;code&gt;.scss&lt;/code&gt; files from
somewhere inside &lt;code&gt;venv/lib/python3.11/site-packages/&amp;lt;package&amp;gt;/styles/&lt;/code&gt; would of
course have been possible, but very obscure. Also, not everyone puts their
virtualenv at &lt;code&gt;venv&lt;/code&gt;, the &lt;code&gt;README&lt;/code&gt; instructions for those packages would
quickly have become unwieldy. CSS variables paved the way for shipping CSS as a
Django static file while still allowing customizability by leveraging the
functionality of the browser itself instead of the frontend build toolchain.&lt;/p&gt;
&lt;h2&gt;Patterns for overrideable values&lt;/h2&gt;
&lt;p&gt;A pattern for defining defaults for CSS variables is to always define the
fallback (the example is intentionally bad but inspired by real world
experiences when developing
&lt;a href="https://github.com/feinheit/feincms3-cookiecontrol"&gt;feincms3-cookiecontrol&lt;/a&gt;):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;box&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--box-background&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#222&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--box-foreground&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Less repetition (but trouble awaits)&lt;/h2&gt;
&lt;p&gt;If &lt;code&gt;--box-background&lt;/code&gt; isn&amp;rsquo;t set the &lt;code&gt;var()&lt;/code&gt; function falls back to the second
argument, &lt;code&gt;#222&lt;/code&gt;. Repeating this value over and over gets annoying quickly, so
you define a few defaults on the &lt;code&gt;:root&lt;/code&gt; element and use those variables in the
code, without specifying the default again:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--box-background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#222&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--box-foreground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;box&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--box-background&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--box-foreground&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The project can now override the default background color using:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--box-background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--box-foreground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course now you&amp;rsquo;re back at the mercy of CSS loading order. If the app&amp;rsquo;s CSS
is loaded first, everything works. If not, your custom value is immediately
overwritten. You could avoid this by overwriting the default lower in the cascade:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;box&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--box-background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#444&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--box-foreground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#ccc&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great, everything works again!&lt;/p&gt;
&lt;p&gt;Later, the box also contains a button which uses a different background but the
same foreground, so of course we add more variables in the package:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--box-background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#222&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--box-foreground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--box-button-background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--box-button-foreground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--box-foreground&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What happens now when overwriting the &lt;code&gt;--box-foreground&lt;/code&gt; variable just for the
&lt;code&gt;.box&lt;/code&gt; element?&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;re not sure? I certainly wasn&amp;rsquo;t and am not. But what I remember happening
was that the overridden foreground color was just applied to the text and not
to the button itself. I was confused (it seems clearer in hindsight&amp;hellip;)&lt;/p&gt;
&lt;h2&gt;A better way&lt;/h2&gt;
&lt;p&gt;If values are supposed to be overridden and only used inside components, a
better way is to define local CSS for components by following a convention
(underscore prefix for local/private variables):&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c"&gt;/* Defined on .box, not :root */&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;box&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--_background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--box-background&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#222&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--_foreground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--box-foreground&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#fff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--_button-background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--box-button-background&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#333&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--_button-foreground&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--box-button-foreground&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--_foreground&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then you only use the prefixed versions inside the component:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;box&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--_background&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--_foreground&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;box__button&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;background&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--_button-background&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;color&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--_button-foreground&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;--box-*&lt;/code&gt; variables are undefined by default; the only time when they are
set is when the user of the package wants to override those values. If you only
overide the box foreground the button also inherits the new foreground color.
And while there would certainly be a way to achieve the same thing with the old
way above it&amp;rsquo;s certainly not as simple to explain.&lt;/p&gt;
&lt;p&gt;The reason why it&amp;rsquo;s simple to explain is &lt;strong&gt;immutability&lt;/strong&gt;. The CSS variables
which are overrideable by the user are only ever read by the package, never
written to.&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:variables"&gt;
&lt;p&gt;Custom properties would probably be the more correct naming, but CSS variables is nicer to say.&amp;#160;&lt;a class="footnote-backref" href="#fnref:variables" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Unlearning SCSS to use CSS variables effectively</title><link href="https://406.ch/writing/unlearning-scss-to-use-css-variables-effectively/" rel="alternate" /><id>https://406.ch/writing/unlearning-scss-to-use-css-variables-effectively/</id><published>2023-05-31T12:00:00Z</published><updated>2023-05-31T12:00:00Z</updated><summary type="html">&lt;h1&gt;Unlearning SCSS to use CSS variables effectively&lt;/h1&gt;
&lt;p&gt;SCSS variables are a way to stop repeating the same values over and over. They
are very useful already, especially when used together with some of the more
interesting SCSS functions such as &lt;code&gt;brighten()&lt;/code&gt;, &lt;code&gt;darken()&lt;/code&gt; etc. CSS doesn&amp;rsquo;t
really have ways to do the same yet. &lt;code&gt;hsl(var(...)...)&lt;/code&gt; only gets you so far.&lt;/p&gt;
&lt;p&gt;CSS variables are another beast. You can use them the same way by replacing &lt;code&gt;$&lt;/code&gt;
with &lt;code&gt;--&lt;/code&gt; but if you do this you&amp;rsquo;re missing out big time on the features which
actually make CSS variables great: The cascade and the ability to update them
in response to media queries, interactions or other events.&lt;/p&gt;
&lt;p&gt;The way I&amp;rsquo;m using CSS variables is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Define good defaults on the &lt;code&gt;:root&lt;/code&gt; selector.&lt;/li&gt;
&lt;li&gt;Change those defaults in response to media queries, e.g. for large screens
  when writing mobile first CSS &amp;ndash; as you should.&lt;/li&gt;
&lt;li&gt;Override defaults in some contexts, e.g. in an &lt;code&gt;&amp;lt;aside&amp;gt;&lt;/code&gt; or some other
  fitting component.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Suppose you wanted different spacings between components depending on the
breakpoint. You could go the fully fluid route with &lt;code&gt;clamp()&lt;/code&gt;, &lt;code&gt;max()&lt;/code&gt;, &lt;code&gt;min()&lt;/code&gt;
and viewport-relative units. It&amp;rsquo;s simpler to keep the complexity lower and use
breakpoints, certainly for me.&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;media&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;800px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;--space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now you can use &lt;code&gt;var(--space)&lt;/code&gt; everywhere:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;box&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;margin-bottom&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nf"&gt;var&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;--space&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The equivalent SCSS would probably look something like this, with a fitting
&lt;code&gt;breakpoint()&lt;/code&gt; mixin:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="nv"&gt;$space-sm&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="nv"&gt;$space-md&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="nc"&gt;.box&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nt"&gt;margin-bottom&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;space-sm&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="o"&gt;@&lt;/span&gt;&lt;span class="nt"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;breakpoint&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;md&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nt"&gt;margin-bottom&lt;/span&gt;&lt;span class="nd"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;space-md&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That doesn&amp;rsquo;t look too bad until you have to repeat the breakpoint in all your
components. That&amp;rsquo;s when SCSS gets boring while CSS is staying awesome.&lt;/p&gt;
&lt;h2&gt;Upping your game.&lt;/h2&gt;
&lt;p&gt;You could also use
&lt;a href="https://www.npmjs.com/package/@csstools/postcss-nesting-experimental"&gt;postcss-nesting&lt;/a&gt;
and &lt;a href="https://www.npmjs.com/package/postcss-custom-media"&gt;postcss-custom-media&lt;/a&gt;
and write:&lt;/p&gt;
&lt;div class="codehilite"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;custom-media&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;--media-md&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nt"&gt;min-width&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nt"&gt;800px&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;

&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="err"&gt;@media&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;(--media-md)&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;{&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="nv"&gt;--space&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="kt"&gt;rem&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="err"&gt;}&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nesting is definitely a two-edged sword though. CSS methodologies such as BEM
(Block Element Modifier) should generally fix the need to use nesting at all.
Nesting leads to overspecific CSS, and also to an enormous amount of generated
CSS which is also brittle and basically impossible to refactor (&amp;ldquo;write-only
CSS&amp;rdquo;). But, in some contexts it&amp;rsquo;s really nice. I do like the fact that
indentation has a specific meaning if used like that.&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 18 and 19)</title><link href="https://406.ch/writing/weeknotes-2023-week-18-and-19/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-18-and-19/</id><published>2023-05-12T12:00:00Z</published><updated>2023-05-12T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 18 and 19)&lt;/h1&gt;
&lt;p&gt;Not much programming this week :-(&lt;/p&gt;
&lt;h2&gt;oEmbed&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://406.ch/writing/weeknotes-2023-week-17/"&gt;Still occupying myself with oEmbed.&lt;/a&gt; I have been looking at a few libraries and have rediscovered &lt;a href="https://github.com/coleifer/micawber/"&gt;micawber&lt;/a&gt; which probably does everything I need. Yay, another reinvented wheel avoided. I haven&amp;rsquo;t tested it yet but I&amp;rsquo;m quite sure that replacing the &lt;a href="https://github.com/matthiask/feincms3/blob/main/feincms3/plugins/external.py"&gt;oEmbed functionality in feincms3&amp;rsquo;s external plugin&lt;/a&gt; with micawber would be a good idea.&lt;/p&gt;
&lt;h2&gt;Vacation&lt;/h2&gt;
&lt;p&gt;Vacation last week. Was nice. We went for a few hikes. I have learned that I&amp;rsquo;m
not totally free from giddiness anymore. Oh well.&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 17)</title><link href="https://406.ch/writing/weeknotes-2023-week-17/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-17/</id><published>2023-04-28T12:00:00Z</published><updated>2023-04-28T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 17)&lt;/h1&gt;&lt;h2&gt;Birthday&lt;/h2&gt;
&lt;p&gt;Another year achieved. Feels the same as last year. I&amp;rsquo;m glad.&lt;/p&gt;
&lt;h2&gt;feincms3-cookiecontrol&lt;/h2&gt;
&lt;p&gt;I have released &lt;a href="https://pypi.org/project/feincms3-cookiecontrol/"&gt;feincms3-cookiecontrol
1.3&lt;/a&gt;. Mostly cleanups since
1.2, but also a new translation (already announced here). The script size has
been reduced from 4519 bytes to 4228 bytes (-6.5%) while keeping all features
intact. The reduction is totally meaningless but it was fun to do.&lt;/p&gt;
&lt;h2&gt;oEmbed&lt;/h2&gt;
&lt;p&gt;I have been digging into the oEmbed spec a bit. I didn&amp;rsquo;t even know that a
central list of &lt;a href="https://oembed.com/providers.json"&gt;providers&lt;/a&gt; exists.
&lt;a href="https://noembed.com/"&gt;Noembed&lt;/a&gt; still works great to embed many different types
of content but I worry more and more about its maintenance state.
Reimplementing the interesting parts shouldn&amp;rsquo;t be that hard, but maybe I don&amp;rsquo;t
have to do this myself. &lt;a href="https://github.com/attakei-lab/oEmbedPy/"&gt;oEmbedPy&lt;/a&gt;
looks nice, I hope I get a chance to play around with it.&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 16)</title><link href="https://406.ch/writing/weeknotes-2023-week-16/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-16/</id><published>2023-04-21T12:00:00Z</published><updated>2023-04-21T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 16)&lt;/h1&gt;
&lt;h2&gt;Experiments with Stable Diffusion&lt;/h2&gt;
&lt;p&gt;A friend and myself threw a few scripts together to automatically finetune a Stable Diffusion model using images downloaded from Google Image search. It&amp;rsquo;s terrifying how easy and fast generating fake news including photorealistic images can be and will be already. And seeing how fast those models improve it&amp;rsquo;s just a matter of time until we can trust photos even less than now. Manipulating images has been possible for a long time of course, but it hasn&amp;rsquo;t been a &amp;ldquo;commodity&amp;rdquo; until now.&lt;/p&gt;
&lt;p&gt;I definitely also see upsides in the new machine learning technologies but I fear that there&amp;rsquo;s a real danger to trust, and in extension to democracy.&lt;/p&gt;
&lt;p&gt;This technology and what we did will be a part of an upcoming &lt;a href="https://www.srf.ch/play/tv/sendung/kulturplatz?id=d70e9bb9-0cee-46b6-8d87-7cbd8317a9c7"&gt;SRF Kulturplatz&lt;/a&gt; broadcast, or so I hope. It&amp;rsquo;s high time that the public knows what&amp;rsquo;s possible. It&amp;rsquo;s about &lt;strong&gt;,edia literacy&lt;/strong&gt; really.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not that pessimistic though. I just hope that this time the thoughtfulness will prevail over pure profit seeking. (Did I really write that.)&lt;/p&gt;
&lt;h2&gt;&lt;a href="https://github.com/django-ckeditor/django-ckeditor"&gt;django-ckeditor&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;Many people are noticing that the CKEditor 4 integration for Django doesn&amp;rsquo;t work that well when using the dark color scheme of the Django admin panel. That&amp;rsquo;s not surprising. What does surprise me is the number of reports and the total absence of pull requests. Subjectively, most other packages I help maintain have a comfortable ratio of issues and pull requests.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m not complaining and people aren&amp;rsquo;t complaining, almost everyone is nice and tries to be helpful. Since I&amp;rsquo;m not a heavy user of django-ckeditor anymore I don&amp;rsquo;t really find the motivation to fix this issue myself since it&amp;rsquo;s not all that enjoyable work to me. I would just hope that &lt;a href="https://github.com/django-ckeditor/django-ckeditor/issues/670"&gt;after all this time&lt;/a&gt; someone would finally come and do the necessary work &amp;ndash; if they cared enough.&lt;/p&gt;
&lt;h2&gt;django-mptt&lt;/h2&gt;
&lt;p&gt;I have marked &lt;a href="https://github.com/django-mptt/django-mptt"&gt;django-mptt&lt;/a&gt; as unmaintained two years ago. I&amp;rsquo;m still looking at pull requests from time to time but without feeling an obligation to do so and without feeling bad when I miss something.&lt;/p&gt;
&lt;p&gt;I wonder if there are still many people out there who still depend on this library and if any of them would be willing to pick up the maintenance? On the off chance that someone is out there who has the time, ability and motivation and just didn&amp;rsquo;t know that django-mptt could use some love: Here&amp;rsquo;s your invite!&lt;/p&gt;</summary></entry><entry><title>The insides of my static site generator</title><link href="https://406.ch/writing/the-insides-of-my-static-site-generator/" rel="alternate" /><id>https://406.ch/writing/the-insides-of-my-static-site-generator/</id><published>2023-04-19T12:00:00Z</published><updated>2023-04-19T12:00:00Z</updated><summary type="html">&lt;h1&gt;The insides of my static site generator&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://406.ch/writing/static-site-generation/"&gt;Last sunday I wrote that I&amp;rsquo;m now using a hacky ~200 LOC Python script to
generate this blog.&lt;/a&gt; The ~200
LOC became a challenge to myself immediately and I started refactoring the code
while adding additional features, adding a licensing comment at the top and
further reducing the lines of code in there.&lt;/p&gt;
&lt;p&gt;I don&amp;rsquo;t intend to stop working on it, but I&amp;rsquo;m really happy with the result &lt;a href="https://github.com/matthiask/406.ch/blob/e6402d0927c92c6d426db1dd44de6002940f28b7/generate.py"&gt;as it is currently&lt;/a&gt;. The script is less than 190 lines long and supports:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Generating individual HTML files for the front page, the category pages and posts&lt;/li&gt;
&lt;li&gt;Generating &lt;code&gt;robots.txt&lt;/code&gt; and &lt;code&gt;sitemap.xml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Generating Atom feeds for all posts and posts of each category&lt;/li&gt;
&lt;li&gt;Minifying HTML and CSS using
  &lt;a href="https://pypi.org/project/minify-html/"&gt;minify-html&lt;/a&gt; and
  &lt;a href="https://pypi.org/project/rcssmin/"&gt;rcssmin&lt;/a&gt;; the CSS is outputted as a
  single file and includes the content hash in the filename for better
  cacheability&lt;/li&gt;
&lt;li&gt;Keeping the link structure of the old Django-based website&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;I used Django&amp;rsquo;s &lt;code&gt;feedgenerator.py&lt;/code&gt; module at first to generate the Atom feed;
I have since switched to directly working with the &lt;a href="https://docs.python.org/3/library/xml.etree.elementtree.html#module-xml.etree.ElementTree"&gt;ElementTree
API&lt;/a&gt;.
Yes, it&amp;rsquo;s probably less efficient since it has to keep the whole XML tree in
memory but who cares when the largest file&amp;rsquo;s file size is under 100 KiB at the
time of writing.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m using tox to generate the site locally; the local build includes published
and draft posts. The production build uses GitHub actions and automatically
deploys to GitHub pages, while only including published posts. There is no
incremental build right now but rebuilding the whole site using tox (with an
initialized virtualenv) takes less than one second, so that&amp;rsquo;s not really a pain
point for me right now.&lt;/p&gt;
&lt;p&gt;A difficulty was that I have used URLs ending in slashes in the past, not just
for the browsable pages but also for the Atom feeds themselves. nginx only
serves &lt;code&gt;index.html&lt;/code&gt; in folders by default so I couldn&amp;rsquo;t just add a
&lt;code&gt;index.xml&lt;/code&gt; file in those folders. Luckily enough the internet is made of
lots and lots of duct tape and saving the atom feed as &lt;code&gt;.../feed/index.html&lt;/code&gt;
actually works. It seems that RSS readers, aggregators and some libraries such
as &lt;a href="https://pypi.org/project/feedparser/"&gt;feedparser&lt;/a&gt; do not really need the
correct HTTP headers.&lt;/p&gt;
&lt;p&gt;I have licensed the script under the &lt;a href="http://www.wtfpl.net/"&gt;WTFPL&lt;/a&gt;, so if
you&amp;rsquo;re interested you can do what you want with it, without any obligations. I
would certainly enjoy hearing about it though!&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 15)</title><link href="https://406.ch/writing/weeknotes-2023-week-15/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-15/</id><published>2023-04-16T12:00:00Z</published><updated>2023-04-16T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 15)&lt;/h1&gt;&lt;h2&gt;Romansh translations for feincms3-cookiecontrol and django-fineforms&lt;/h2&gt;
&lt;p&gt;The feincms3 cookie control banner and django-fineforms have received a small update: Support for the &lt;a href="https://en.wikipedia.org/wiki/Romansh_language"&gt;Romansh&lt;/a&gt; language. I would be surprised if any readers of this blog even knew about this language at all. Switzerland has four official languages: German, French, Italian and the mentioned Romansh.&lt;/p&gt;
&lt;p&gt;It&amp;rsquo;s not a coincidence of course that those two packages have received an update at the same time. Both packages are used for an upcoming campaign site where people may express their support for political action to preserve or protect the &lt;a href="https://en.wikipedia.org/wiki/Biodiversity"&gt;biodiversity&lt;/a&gt;. It&amp;rsquo;s at the same time laughable and horrifying that this is even a thing though: Who in their right mind could NOT agree that preserving biodiversity is important? It&amp;rsquo;s incomprehensible. Maybe I&amp;rsquo;m just a romantic &lt;a href="https://en.wikipedia.org/wiki/Gutmensch"&gt;Gutmensch&lt;/a&gt; after all&amp;hellip;&lt;/p&gt;
&lt;h2&gt;django-ckeditor&lt;/h2&gt;
&lt;p&gt;I have set up the &lt;a href="https://github.com/actions/stale"&gt;stale&lt;/a&gt; GitHub action for the &lt;a href="https://github.com/django-ckeditor/django-ckeditor"&gt;django-ckeditor&lt;/a&gt; repository. So many support requests, so little time and almost no actual collaborators. Also, many support requests actually concern CKEditor itself, not its Django integration. I shouldn&amp;rsquo;t complain though, CKEditor has served me well and still does, &lt;a href="https://github.com/matthiask/feincms3/blob/main/feincms3/inline_ckeditor.py"&gt;especially when it&amp;rsquo;s being used with a very minimal configuration&lt;/a&gt; which basically makes most pain points of HTML editors go away.&lt;/p&gt;
&lt;h2&gt;django-debug-toolbar&lt;/h2&gt;
&lt;p&gt;I have reviewed and merged a few changes to &lt;a href="https://github.com/jazzband/django-debug-toolbar"&gt;django-debug-toolbar&lt;/a&gt; in the last week. Still a fun project, especially since it&amp;rsquo;s so widely used and loved.&lt;/p&gt;
&lt;h2&gt;Meta&lt;/h2&gt;
&lt;p&gt;Blogging with vim is fun.&lt;/p&gt;</summary></entry><entry><title>Static site generation</title><link href="https://406.ch/writing/static-site-generation/" rel="alternate" /><id>https://406.ch/writing/static-site-generation/</id><published>2023-04-15T12:00:00Z</published><updated>2023-04-15T12:00:00Z</updated><summary type="html">&lt;h1&gt;Static site generation&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://406.ch/writing/weeknotes-2023-week-10/"&gt;I did what I threatened (myself) to do:&lt;/a&gt; I replaced the Django code base for this weblog with a static site generator.&lt;/p&gt;
&lt;p&gt;My main goal was to preserve as much as possible of the existing structure, including the Atom feeds and the IDs of posts so that the rewrite wouldn&amp;rsquo;t flood any aggregators.&lt;/p&gt;
&lt;p&gt;The end result is a hacky ~200 LOC Python script which uses Markdown, Jinja2 and minify-html. Markdown is great for blogging and I have been using it for a long time, basically since I started this website in 2005. I don&amp;rsquo;t like it that much for documentation, but that&amp;rsquo;s a story for another day.&lt;/p&gt;
&lt;p&gt;For now I still deploy the blog to a VPS but there&amp;rsquo;s nothing stopping me from uploading it somewhere else. I&amp;rsquo;m thinking about using GitHub actions for the deployment, but I can do that another day.&lt;/p&gt;</summary></entry><entry><title>Run less code in production or you’ll end up paying the price later</title><link href="https://406.ch/writing/run-less-code-in-production-or-youll-end-up-paying-the-price-later/" rel="alternate" /><id>https://406.ch/writing/run-less-code-in-production-or-youll-end-up-paying-the-price-later/</id><published>2023-04-07T12:00:00Z</published><updated>2023-04-07T12:00:00Z</updated><summary type="html">&lt;h1&gt;Run less code in production or you&amp;rsquo;ll end up paying the price later&lt;/h1&gt;
&lt;p&gt;At &lt;a href="https://feinheit.ch/"&gt;work&lt;/a&gt; we do have the problem of dependencies which aren&amp;rsquo;t maintained anymore. That&amp;rsquo;s actually a great problem to have because it means that the app or website ended up running for a long time, maybe longer than expected initially. I think that websites have a lifetime of 3-5 years&lt;sup id="fnref:lifetime"&gt;&lt;a class="footnote-ref" href="#fn:lifetime"&gt;1&lt;/a&gt;&lt;/sup&gt; which is already much longer than the lifetime of major versions of some rapid development frameworks, especially frontend frameworks. We have been using &lt;a href="https://get.foundation/"&gt;Zurb Foundation&lt;/a&gt; in the past. It has served us well and I don&amp;rsquo;t want to dunk on it – after all it is free, it has great documentation and it works well. It has many features and many components, but as changes happen, not just in the framework itself but also in the tooling it uses upgrades stay hard and things start to break somewhere down the road (for example when &lt;a href="https://github.com/sass/dart-sass"&gt;Dart Sass 2.0 will be released&lt;/a&gt;. And when that happens you have to pick up the parts and maintain them yourself &amp;ndash; having grown your codebase by a considerable amount practically overnight.&lt;/p&gt;
&lt;p&gt;Of course it&amp;rsquo;s also hard to argue for starting to write all HTML, CSS and JavaScript from scratch. &lt;a href="https://406.ch/writing/flake8-and-value-standards/"&gt;Standards are very helpful.&lt;/a&gt; Building without some sort of standardized tooling will not only lead to rank growth but also means that you have to make many many small and (relatively) irrelevant decisions &lt;em&gt;and you have to justify those decisions when working in a team&lt;/em&gt; because you could just as well have decided differently.&lt;/p&gt;
&lt;p&gt;So after all that, should you use frontend frameworks? The answer is &amp;ndash; as always &amp;ndash; it depends.&lt;/p&gt;
&lt;p&gt;You should definitely use a framework when prototyping.&lt;/p&gt;
&lt;p&gt;But already when working on a MVP it gets less and less clear. You&amp;rsquo;re kidding yourself if you think that sometime in the future you&amp;rsquo;ll have the time to clean up your code base; &lt;strong&gt;of course&lt;/strong&gt; you&amp;rsquo;re always refactoring and &lt;strong&gt;of course&lt;/strong&gt; you&amp;rsquo;ll try to always leave each part behind a little bit nicer than it was before, but even then the big rewrite didn&amp;rsquo;t happen and you&amp;rsquo;ll continue using at least some aspects of the code that was hastily written for the initial release.&lt;/p&gt;
&lt;p&gt;The exceptions to the rule are frameworks and tools which have a proven track record of maintaining stability over time. So, despite the fact that &lt;a href="https://www.djangoproject.com/"&gt;the Django framework&lt;/a&gt; has more than 100&amp;lsquo;000 lines of code I feel good about using it. Django was released as Open Source in July 2005 and has been steadily maintained over the last nearly 18 years. &lt;a href="https://www.djangoproject.com/fundraising/"&gt;Funding&lt;/a&gt; is always a problem (contribute if you can!) but at least the Django software foundation manages to employ two Django fellows which are certainly key in driving the framework forward.&lt;/p&gt;
&lt;p&gt;Again the picture gets less clear when third party apps are involved. Some third party apps were actively maintained several years ago and now they aren&amp;rsquo;t. I have personally taken over the maintenance of several such apps or more often than not reimplemented them with less functionality and much less code. Sometimes it&amp;rsquo;s easier to maintain a little more of your own code instead of much more of someone else&amp;rsquo;s code.&lt;/p&gt;
&lt;p&gt;So, what&amp;rsquo;s the take away?&lt;/p&gt;
&lt;p&gt;Maybe pay attention to the following points:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Recent activity on the repository, recent releases and good docs are always a good sign for the health of a project.&lt;/li&gt;
&lt;li&gt;Take the time to read at least a part of the code of third party projects before starting to rely on them. It&amp;rsquo;s a bad idea to just read the documentation and nothing else. When it comes to Django apps I always at least read the model files to understand how the data&amp;rsquo;s modeled and skim the views and forms.&lt;/li&gt;
&lt;li&gt;Have a look at issues and pull/merge requests. Don&amp;rsquo;t worry about usage questions etc but mainly about &amp;ldquo;hard problem&amp;rdquo; issues.&lt;/li&gt;
&lt;li&gt;Try to stay away from packages which are too comprehensive; reusing these packages is hard even for their authors and when they are abandoned the amount of responsibility transferred to you will be so much bigger.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:lifetime"&gt;
&lt;p&gt;Citation required obviously, don&amp;rsquo;t take my word on it. Data is certainly more long lived, but I have my doubts regarding the code running many small sites.&amp;#160;&lt;a class="footnote-backref" href="#fnref:lifetime" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Weeknotes (2023 week 13 and 14)</title><link href="https://406.ch/writing/weeknotes-2023-week-13-and-14/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-13-and-14/</id><published>2023-04-05T12:00:00Z</published><updated>2023-04-05T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 13 and 14)&lt;/h1&gt;
&lt;h2&gt;My son will be a teenager soon&lt;/h2&gt;
&lt;p&gt;My eldest is now 12 years old and will be a teenager soon. We had a good time and two nice Birthday parties, one with his friends and one with family and our friends. Good times.&lt;/p&gt;
&lt;h2&gt;django-debug-toolbar 4.0&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://www.djangoproject.com/weblog/2023/apr/03/django-42-released/"&gt;Django 4.2 was released&lt;/a&gt;, &lt;a href="https://github.com/pypa/hatch/pull/762"&gt;Hatch gained support for the Django 4.2 Trove classifier&lt;/a&gt; and &lt;a href="https://pypi.org/project/django-debug-toolbar/"&gt;we released django-debug-toolbar 4.0&lt;/a&gt;, with support for Django 4.2, psycopg 3 and all the existing goodies.&lt;/p&gt;
&lt;h2&gt;feincms3-cookiecontrol&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://github.com/feinheit/feincms3-cookiecontrol/"&gt;feincms3-cookiecontrol&lt;/a&gt; has gained support for consciously embedding stuff via oEmbed. It can now use &lt;a href="https://noembed.com/"&gt;Noembed&lt;/a&gt; (via &lt;a href="https://github.com/matthiask/feincms3"&gt;feincms3&lt;/a&gt;&amp;rsquo;s external plugin) and only actually embed the third party content if users consented explicitly.&lt;/p&gt;
&lt;p&gt;I have since learned through the &lt;a href="https://podcast.datenschutzpartner.ch/"&gt;Datenschutz-Plaudereien&lt;/a&gt; podcast that laws regarding consent are not that strict in Switzerland compared to the European Union, also not when the &lt;a href="https://www.admin.ch/gov/de/start/dokumentation/medienmitteilungen.msg-id-90134.html"&gt;DSG&lt;/a&gt; is put into effect in September. What&amp;rsquo;s right and what&amp;rsquo;s legal are two different things and while I don&amp;rsquo;t really like the ubiquitous cookie banners (especially not when they aren&amp;rsquo;t actually doing anything) I like the idea of explicit consent and of not sending data unnecessarily to third party providers. The additional click isn&amp;rsquo;t that bad.&lt;/p&gt;
&lt;h2&gt;Diving into hatch for Python packaging&lt;/h2&gt;
&lt;p&gt;I listened to the TalkPython podcast episode with Ofek Lev on &lt;a href="https://talkpython.fm/episodes/show/408/hatch-a-modern-python-workflow"&gt;his Hatch packaging tool&lt;/a&gt;. After a long period of uncertainty and waiting I bit the bullet and started to migrate a few of my Python packages from setuptools and &lt;code&gt;setup.py&lt;/code&gt; to hatch and &lt;code&gt;pyproject.toml&lt;/code&gt;, until now &lt;a href="https://github.com/feinheit/feincms3-cookiecontrol"&gt;feincms3-cookiecontrol&lt;/a&gt; and &lt;a href="https://github.com/matthiask/feincms3"&gt;feincms3&lt;/a&gt;. It was surprisingly painless.&lt;/p&gt;
&lt;h2&gt;ruff&lt;/h2&gt;
&lt;p&gt;I started learning Rust during the last &lt;a href="https://adventofcode.com/"&gt;Advent of Code&lt;/a&gt;; it&amp;rsquo;s a nice language. &lt;a href="https://beta.ruff.rs/"&gt;ruff&lt;/a&gt; is a linter and (more and more) formatter for Python code written in Rust. After years of working with Python and Python-based tools it&amp;rsquo;s surprisingly fast, almost worryingly so. It&amp;rsquo;s true what they say: ruff finishes so fast that I&amp;rsquo;m always left wondering if it even did anything at all.&lt;/p&gt;
&lt;p&gt;I&amp;rsquo;m configuring ruff through &lt;code&gt;pyproject.toml&lt;/code&gt;, so switching from setuptools to hatch (see above) also helped in this regard. The main trouble I had was that I&amp;rsquo;m running Python 3.11 locally but Python 3.10 in the server environment (no dev-prod parity&amp;hellip;), and rebuilding &lt;code&gt;requirements.txt&lt;/code&gt; locally of course didn&amp;rsquo;t add TOML support because it&amp;rsquo;s built into Python 3.11, but Python 3.10 needs an external package. So of course I broke the build. That&amp;rsquo;s not all bad though: If stuff broke it definitely helps with remembering the reasons later.&lt;/p&gt;
&lt;h2&gt;Meta&lt;/h2&gt;
&lt;p&gt;Co-writing still works really well for me. Expressed differently: I seem to be unable to write without the (slight) pressure of writing together.&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 11 and 12)</title><link href="https://406.ch/writing/weeknotes-2023-week-11-and-12/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-11-and-12/</id><published>2023-03-24T12:00:00Z</published><updated>2023-03-24T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 11 and 12)&lt;/h1&gt;
&lt;h2&gt;Mail user agents being mail user agents&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://pypi.org/project/django-authlib/"&gt;django-authlib&lt;/a&gt; is my collection of utilities for implementing passwordless authentication, either using OAuth2 or by sending magic links by email.&lt;/p&gt;
&lt;p&gt;The latter functionality has existed for a long time in &lt;a href="https://pypi.org/project/django-registration/"&gt;django-registration&lt;/a&gt; (which is great!) but I wanted a way to generate links without the need for a storage somewhere. Django has utilities for &lt;a href="https://docs.djangoproject.com/en/4.1/topics/signing/"&gt;Cryptographic signing&lt;/a&gt; built-in as the &lt;code&gt;django.core.signing&lt;/code&gt; module. I&amp;rsquo;m using this module to send a signed version of the email address to users, and when I&amp;rsquo;m able to successfully verify the email addresses signature I can be sure (enough) that those links have actually been generated by my code.&lt;/p&gt;
&lt;p&gt;The form of the generated verification URL is as follows: &lt;code&gt;https://example.com/.../test@example.com:1pXJtx:aypKOlb5zaCg.../&lt;/code&gt;; the part before the first colon contains the data-to-be-verified, the short string between colons is the timestamp and the rest is the signature, everything generated by &lt;code&gt;django.core.signing&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;So far so boring.&lt;/p&gt;
&lt;p&gt;But then mail user agents happened. Some MUAs insist to butcher the URL in various ways, e.g. by removing the signature or by making only the embedded email address clickable. This is &amp;ldquo;interesting&amp;rdquo; behavior and certainly unexpected.&lt;/p&gt;
&lt;p&gt;Last week I implemented a change where I&amp;rsquo;m now also base64 encoding the email address itself. So, the URL is even longer and even more opaque now but it seems to work well. I also added a HTML version of the mail to hopefully prevent mail programs from creating their own worse version. I could have done that a long time ago but I really like &lt;code&gt;text/plain&lt;/code&gt; mails so I did hold off on that as long as I could. Oh well.&lt;/p&gt;
&lt;h2&gt;feincms3-data and unique fields&lt;/h2&gt;
&lt;p&gt;I did a longer post on &lt;a href="https://406.ch/writing/moving-data-including-deletions-between-the-same-django-app-running-in-different-environments/"&gt;feincms3-data&lt;/a&gt; some time ago which explains what it is for.&lt;/p&gt;
&lt;p&gt;A recurring problem was dumping and loading data in the presence of unique constraints. For example, website managers deleted data with a specific (unique) slug and created new data with the same slug. feincms3-data and also Django itself were unable to handle this. The former because it loads new data before deleting old data, the latter because it doesn&amp;rsquo;t even have a concept of data which should be deleted.&lt;/p&gt;
&lt;p&gt;feincms3-data now has an ugly workaround for this problem: It generates random data for a list of explicitly specified fields (which is very unlikely to cause collisions) and only updates the records with the correct data after the cleanup step. &lt;a href="https://github.com/matthiask/feincms3-data/commit/9324605dc8dcb32ee4118adca0668643597ec130"&gt;The code wasn&amp;rsquo;t that hairy to write&lt;/a&gt; and I was again very happy that unittesting is a thing.&lt;/p&gt;
&lt;h2&gt;ProseMirror hacking&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m back to hacking on &lt;a href="https://prosemirror.net/"&gt;ProseMirror&lt;/a&gt; plugins. I still feel really well about picking it as a basis for all those use cases when using the venerable &lt;a href="https://ckeditor.com/ckeditor-4/"&gt;CKEditor 4&lt;/a&gt; isn&amp;rsquo;t a good fit.&lt;/p&gt;
&lt;p&gt;I did like the fact a lot that ProseMirror was written in JavaScript. Now that it has been rewritten in TypeScript I&amp;rsquo;m reevaluating my resistance against TypeScript, but I just don&amp;rsquo;t know if it&amp;rsquo;s worth it. Why write down all those annotations when the code also works without? I still don&amp;rsquo;t really see the point. Yes I know, catching bugs early and all that. But still.&lt;/p&gt;</summary></entry></feed>