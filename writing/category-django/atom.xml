<?xml version='1.0' encoding='utf-8'?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom"><title>Matthias Kestenholz: Posts about Django</title><link href="https://406.ch/writing/category-django/atom.xml" rel="self" /><link href="https://406.ch/writing/category-django/" rel="alternate" /><id>https://406.ch/writing/category-django/</id><updated>2023-12-15T12:00:00Z</updated><author><name>Matthias Kestenholz</name></author><entry><title>Weeknotes (2023 week 50)</title><link href="https://406.ch/writing/weeknotes-2023-week-50/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-50/</id><published>2023-12-15T12:00:00Z</published><updated>2023-12-15T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 50)&lt;/h1&gt;&lt;h2&gt;django-imagefield&lt;/h2&gt;
&lt;p&gt;The path building scheme used by &lt;a href="https://pypi.org/project/django-imagefield/"&gt;django-imagefield&lt;/a&gt; has proven problematic: It&amp;rsquo;s too likely that processed images will have the same path.&lt;/p&gt;
&lt;p&gt;I have changed the strategy used for generating paths to use more data from the
source; it&amp;rsquo;s now possible (and recommended!) to set &lt;code&gt;IMAGEFIELD_BIN_DEPTH&lt;/code&gt; to
a value greater than 1; 2 or 3 should be sufficient. The default value is 1
which corresponds to the old default so that the change won&amp;rsquo;t be backwards
incompatible. However, you&amp;rsquo;ll always get a deprecation warning if you don&amp;rsquo;t set
a bigger value yourself. The default will probably change in the future.&lt;/p&gt;
&lt;h2&gt;Advent of Code&lt;/h2&gt;
&lt;p&gt;I have always felt a bit as an imposter because I do not have any formal CS
education; not so much in the last few years but certainly earlier in my
career. I have enjoyed participating in the &lt;a href="https://adventofcode.com/"&gt;Advent of Code
2022&lt;/a&gt; a lot and I have definitely learned to know
when to use and how to use a few algorithms I didn&amp;rsquo;t even know before. I&amp;rsquo;m
again working through the puzzles in my own pace and have managed to solve
almost all of them up to today this year. There still are some puzzles where I
don&amp;rsquo;t even know how to start the second part ðŸ˜….&lt;/p&gt;
&lt;h2&gt;Hosting&lt;/h2&gt;
&lt;p&gt;We&amp;rsquo;re still hosting most sites on virtualized servers, without any containers
or any of the new stuff. I&amp;rsquo;m finally reaching the point where the downsides of
this approach start to drag new projects down and the workarounds start looking
worse than maybe switching to containers or even Kubernetes. Wish me luck, I&amp;rsquo;m
more confused than I&amp;rsquo;ve been in years.&lt;/p&gt;
&lt;h2&gt;Health&lt;/h2&gt;
&lt;p&gt;To absolutely nobody&amp;rsquo;s surprise the family and myself have continued to be sick
in the last two weeks. Nothing really bad happened, so we&amp;rsquo;re still lucky.&lt;/p&gt;
&lt;p&gt;There&amp;rsquo;s unfortunately no way to solve a societal problem individually, so that
will probably continue to be our life for now.&lt;/p&gt;
&lt;h2&gt;Releases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-imagefield/"&gt;django-imagefield 0.18&lt;/a&gt;: See
  above.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-sites/"&gt;feincms3-sites 0.20.1&lt;/a&gt;: Added
  additional validation (cleaning) checks. Showing error messages is
  preferrable to crashing with &lt;code&gt;IntegrityError&lt;/code&gt; exceptions after all.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-js-asset/"&gt;django-js-asset 2.2.0&lt;/a&gt;: Hatchling
  seems to dislike it if the project name and the Python module name do not
  match. I actually like &lt;code&gt;django-js-asset&lt;/code&gt;&amp;rsquo;s Python module to be &lt;code&gt;js_asset&lt;/code&gt;
  but I&amp;rsquo;m beginning to rethink this decision.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-json-schema-editor/"&gt;django-json-schema-editor 0.0.4&lt;/a&gt;: See &lt;a href="https://406.ch/writing/django-json-schema-editor/"&gt;the post from this week&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>django-json-schema-editor</title><link href="https://406.ch/writing/django-json-schema-editor/" rel="alternate" /><id>https://406.ch/writing/django-json-schema-editor/</id><published>2023-12-13T12:00:00Z</published><updated>2023-12-13T12:00:00Z</updated><summary type="html">&lt;h1&gt;django-json-schema-editor&lt;/h1&gt;&lt;p&gt;I have extracted a JSON editing component based on
&lt;a href="https://www.npmjs.com/package/@json-editor/json-editor"&gt;@json-editor/json-editor&lt;/a&gt;
from a client&amp;rsquo;s project and released it as open source. It isn&amp;rsquo;t the first JSON editing component by far but I like it a lot for the following reasons:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;It works really well.&lt;/li&gt;
&lt;li&gt;It supports editing arrays of objects using a tabular presentation. Tabular
  isn&amp;rsquo;t always better, but stacked definitely isn&amp;rsquo;t always better as well.&lt;/li&gt;
&lt;li&gt;The data structure is defined as &lt;a href="https://json-schema.org/"&gt;JSON schema&lt;/a&gt;,the
  data which is being entered is validated on the server using the
  &lt;a href="https://pypi.org/project/fastjsonschema/"&gt;fastjsonschema&lt;/a&gt; library. Having a
  schema and schema-based validation fixes most problems I have with less
  structured data than when using only Django model fields (without JSON).&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here&amp;rsquo;s a screenshot of the editing component used as a &lt;a href="https://django-content-editor.readthedocs.io/"&gt;django-content-editor&lt;/a&gt; plugin:&lt;/p&gt;
&lt;p&gt;&lt;img alt="django-json-schema-editor screenshot" src="/assets/20231313-json-schema-editor.png" /&gt;&lt;/p&gt;
&lt;p&gt;Within the first few days of having released the package it has already proven
useful in several other projects. A pleasant (but not totally unexpected)
surprise.&lt;/p&gt;
&lt;h2&gt;Links:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-json-schema-editor/"&gt;PyPI&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/matthiask/django-json-schema-editor"&gt;GitHub&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Weeknotes (2023 week 48)</title><link href="https://406.ch/writing/weeknotes-2023-week-48/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-48/</id><published>2023-11-30T12:00:00Z</published><updated>2023-11-30T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 48)&lt;/h1&gt;&lt;p&gt;A few weeks have passed since the last update. The whole family was repeatedly
sick with different viruses etc&amp;hellip; I hope that the worst is over now. Who
knows.&lt;/p&gt;
&lt;h2&gt;12-factor Django storage configuration&lt;/h2&gt;
&lt;p&gt;I should maybe write a longer and separate post about this, but &lt;a href="https://pypi.org/project/speckenv/"&gt;speckenv&lt;/a&gt; has gained support for the Django &lt;code&gt;STORAGES&lt;/code&gt; setting. No documentation yet, but it supports two storage backends for now, the file system storage and &lt;a href="https://github.com/etianen/django-s3-storage/"&gt;django-s3-storage&lt;/a&gt;, my go-to library for S3-compatible services.&lt;/p&gt;
&lt;p&gt;Using it looks something like this:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;speckenv&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;env&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;speckenv_django&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;django_storage_url&lt;/span&gt;

&lt;span class="n"&gt;STORAGES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;django_storage_url&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;STORAGE_URL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;file:./media/?base_url=/media/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;warn&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="n"&gt;base_dir&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;BASE_DIR&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;staticfiles&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;BACKEND&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;django.contrib.staticfiles.storage.ManifestStaticFilesStorage&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, if you want to use S3 you can put something like this in your &lt;code&gt;.env&lt;/code&gt; file:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;STORAGE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nl"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="nv"&gt;@bucket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;central&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;amazonaws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or maybe something like this, if you want to serve media files without authentication:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;STORAGE_URL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nl"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;access&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;key&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="n"&gt;secret&lt;/span&gt;&lt;span class="nv"&gt;@bucket&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;s3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;eu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;central&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;1.&lt;/span&gt;&lt;span class="n"&gt;amazonaws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;media&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="vm"&gt;?&lt;/span&gt;&lt;span class="n"&gt;aws_s3_public_auth&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;False&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;aws_s3_max_age_seconds&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;31536000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Releases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/speckenv/"&gt;speckenv 6.1.1&lt;/a&gt;: See above.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-meta/"&gt;feincms3-meta 4.6&lt;/a&gt;: York has contributed support for emitting structured data records. Looks nice. No documentation yet.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-tree-queries/"&gt;django-tree-queries 0.16.1&lt;/a&gt;: &lt;code&gt;.values()&lt;/code&gt; and &lt;code&gt;.values_list()&lt;/code&gt; queries are now handled better and more consistently than before.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Weeknotes (2023 week 44)</title><link href="https://406.ch/writing/weeknotes-2023-week-44/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-44/</id><published>2023-11-02T12:00:00Z</published><updated>2023-11-02T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 44)&lt;/h1&gt;&lt;h2&gt;Unmaintained but maintained packages&lt;/h2&gt;
&lt;p&gt;There&amp;rsquo;s a discussion going on in the &lt;a href="https://github.com/django-mptt/django-mptt/issues/833"&gt;django-mptt issue tracker&lt;/a&gt; about the maintenance state of django-mptt. &lt;a href="https://github.com/django-mptt/django-mptt/commit/6f6c1c485f3adc1d579f8d22e0279ce1d52334f6"&gt;I have marked the project as unmaintained in March 2021&lt;/a&gt; and haven&amp;rsquo;t regretted this decision at all. I haven&amp;rsquo;t had to fix &lt;a href="https://github.com/django-mptt/django-mptt/labels/Broken%20Tree"&gt;inconsistencies in the tree structure&lt;/a&gt; once since switching to &lt;a href="https://406.ch/writing/django-tree-queries/"&gt;django-tree-queries&lt;/a&gt;. And if that wasn&amp;rsquo;t enough, I get little but only warm and thankful feedback for the latter, so that&amp;rsquo;s extra nice.&lt;/p&gt;
&lt;p&gt;Despite marking django-mptt as unmaintained I seem to be doing a little bit of maintenance still. I&amp;rsquo;m still using it in old paid projects and so the things I do to make the package work for me is paid work. I&amp;rsquo;m not personally invested in the package anymore, so I&amp;rsquo;m able to tell people that there are absolutely no guarantees about the maintenance, and that feels good.&lt;/p&gt;
&lt;h2&gt;Read the Docs&lt;/h2&gt;
&lt;p&gt;I do understand why the &lt;code&gt;.readthedocs.yaml&lt;/code&gt; file is now necessary. I wish that I wouldn&amp;rsquo;t have to do all the busywork of adding one to projects. I have just resubscribed to the Read the Docs Gold Membership which probably has expired at some point in the past. Read the Docs is excellent and everybody who can should support them.&lt;/p&gt;
&lt;h2&gt;Releases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3/"&gt;feincms3 4.5&lt;/a&gt;, &lt;a href="https://pypi.org/project/feincms3-sites/"&gt;feincms3-sites 0.20&lt;/a&gt; and &lt;a href="https://github.com/feincms/feincms3-language-sites"&gt;feincms3-language-sites 0.3&lt;/a&gt;: Fixed the check which only allows adding an application through the CMS to the page tree (yes, that&amp;rsquo;s right) once; feincms3 worked fine, feincms3-language-sites by accident but feincms3-sites didn&amp;rsquo;t.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/towel/"&gt;towel 0.31&lt;/a&gt;: Towel is one of my oldest packages which is still being used in real-world projects. Towel is a tool for building CRUD-type applications and is designed to keep you DRY while doing that. The project has been heavily inspired by a Django-based agency software I built many years back. The package even has &lt;a href="https://towel.readthedocs.io/en/latest/"&gt;docs&lt;/a&gt;! I&amp;rsquo;m still quite proud of the mostly transparent support for multitenancy, but apart from that I haven&amp;rsquo;t used it in many new projects.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Customize the Django admin to differentiate environments</title><link href="https://406.ch/writing/customize-the-django-admin-to-differentiate-environments/" rel="alternate" /><id>https://406.ch/writing/customize-the-django-admin-to-differentiate-environments/</id><published>2023-10-19T12:00:00Z</published><updated>2023-10-19T12:00:00Z</updated><summary type="html">&lt;h1&gt;Customize the Django admin to differentiate environments&lt;/h1&gt;
&lt;p&gt;&lt;img alt="Four different themes" src="https://user-images.githubusercontent.com/2627/276531977-6787c55e-4e8c-448c-8ed4-c71cd98c9750.png" /&gt;&lt;/p&gt;
&lt;p&gt;We often have the same website running in different configurations:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Once as a production site.&lt;/li&gt;
&lt;li&gt;Once as a place where editors update and preview the content. The content is later automatically (and maybe &lt;a href="https://406.ch/writing/moving-data-including-deletions-between-the-same-django-app-running-in-different-environments/"&gt;partially&lt;/a&gt;) transferred from this environment to the production environment.&lt;/li&gt;
&lt;li&gt;Once as a stage environment to stabilize the code.&lt;/li&gt;
&lt;li&gt;And maybe additional environments for local development.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The Django admin panel mainly uses CSS variables for styling since &lt;a href="https://docs.djangoproject.com/en/4.2/ref/contrib/admin/#admin-theming"&gt;theming support was introduced in Django 3.2&lt;/a&gt; (by yours truly with a lot of help from others). This makes it simple and fun to customize the colors of all interface elements in a straightforward way without having to write loads of CSS.&lt;/p&gt;
&lt;p&gt;If you have a &lt;code&gt;ENVIRONMENT&lt;/code&gt; context variable available (as we do) you could add
the following template as &lt;code&gt;admin/base.html&lt;/code&gt; to your project, giving you a red
color scheme for the production environment (to discourage people from updating
content) and a nice scheme for the &lt;code&gt;preproduction&lt;/code&gt; environment which clearly
deviates from the standard color scheme used everywhere else:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;block&lt;/span&gt; &lt;span class="nv"&gt;extrahead&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
  &lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nb"&gt;block&lt;/span&gt;&lt;span class="nv"&gt;.super&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;
  &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;#&lt;/span&gt;&lt;span class="nn"&gt;site-name&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="nd"&gt;after&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;content&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot; (&lt;/span&gt;&lt;span class="cp"&gt;{{&lt;/span&gt; &lt;span class="nv"&gt;ENVIRONMENT&lt;/span&gt; &lt;span class="cp"&gt;}}&lt;/span&gt;&lt;span class="s2"&gt;)&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="k"&gt;font-size&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;60&lt;/span&gt;&lt;span class="kt"&gt;%&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;ENVIRONMENT&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;production&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#aa0000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#810000&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--accent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="kc"&gt;yellow&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;elif&lt;/span&gt; &lt;span class="nv"&gt;ENVIRONMENT&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;preproduction&amp;#39;&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
    &lt;span class="p"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;root&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--primary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#30b181&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--secondary&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#1f7957&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="nv"&gt;--accent&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mh"&gt;#cdffea&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="p"&gt;&amp;lt;/&lt;/span&gt;&lt;span class="nt"&gt;style&lt;/span&gt;&lt;span class="p"&gt;&amp;gt;&lt;/span&gt;
  &lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endif&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;span class="cp"&gt;{%&lt;/span&gt; &lt;span class="k"&gt;endblock&lt;/span&gt; &lt;span class="cp"&gt;%}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>Weeknotes (2023 week 42)</title><link href="https://406.ch/writing/weeknotes-2023-week-42/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-42/</id><published>2023-10-18T12:00:00Z</published><updated>2023-10-18T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 42)&lt;/h1&gt;&lt;h2&gt;Vacation in Italy&lt;/h2&gt;
&lt;p&gt;We have spent a wonderful family week in Italy. The voyage by train was very
comfortable and we had a great time there. I have lived close to lakes all my
life but the sea is always something else. Now I enjoy the cold temperatures of
fall.&lt;/p&gt;
&lt;h2&gt;Going back (forward) to GitJournal&lt;/h2&gt;
&lt;p&gt;I have tried several note taking apps but I&amp;rsquo;m now back using
&lt;a href="https://gitjournal.io/"&gt;GitJournal&lt;/a&gt; with a Git repository filled with Markdown
notes. It works well enough. I just wish that there was a way to make notes
more distinguishable and I wish that the editor was more forgiving when
encountering badly formatted checklists.&lt;/p&gt;
&lt;h2&gt;Analog blogging&lt;/h2&gt;
&lt;p&gt;I have long wanted to write about &lt;a href="https://406.ch/writing/why-we-switched-from-slack-to-discord-at-work/"&gt;our switch from Slack to
Discord&lt;/a&gt;.
I have started to write this post with pen and paper. I find that I think
better when using pen and paper than when using the computer keyboard. One
factor is certainly that the computer offers more distractions, but I suspect
that another, more important factor is that as a fast typist the fingers and
the thinking are always getting out of step, and this happens less when using a
slower method of writing. This actually isn&amp;rsquo;t an idea I had myself, but I don&amp;rsquo;t
remember where I got it from.&lt;/p&gt;
&lt;h2&gt;Zero-based versioning: Good or bad?&lt;/h2&gt;
&lt;p&gt;I discovered &lt;a href="https://0ver.org/"&gt;ZeroVer&lt;/a&gt; sometime in the last few days. I have
many many Django packages with zero-based versions. Some of them have been used
in production for years now. I sometimes wonder if staying with &lt;code&gt;0.&lt;/code&gt; is
unprofessional and I should just release 1.0 and be done with it or if it
doesn&amp;rsquo;t really matter at all.&lt;/p&gt;
&lt;p&gt;If I evaluate software packages more often than not I don&amp;rsquo;t look at the version
number or the version numbering scheme (except when a package is still using
&lt;code&gt;0.0.&lt;/code&gt;) when deciding whether to rely on it or not. The documentation and the
code itself are much more important to me.&lt;/p&gt;
&lt;h2&gt;Releases&lt;/h2&gt;
&lt;p&gt;I haven&amp;rsquo;t uploaded any releases in the last 14 days. That&amp;rsquo;s good: I&amp;rsquo;m one of
those people who have made their passion their job (which is great) but that
sometimes makes it hard to not work at all since I can always tell myself that
I&amp;rsquo;m not working, that it&amp;rsquo;s just a hobby.&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 40)</title><link href="https://406.ch/writing/weeknotes-2023-week-40/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-40/</id><published>2023-10-04T12:00:00Z</published><updated>2023-10-04T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 40)&lt;/h1&gt;&lt;h2&gt;More work on hosting several websites from a single Django application server using feincms3-sites&lt;/h2&gt;
&lt;p&gt;I have mentioned feincms3-sites last week in my last weeknotes entry; I have
again given this package a lot of attention in the last days, so another update
is in order.&lt;/p&gt;
&lt;p&gt;It is now possible to override the list of languages available on each site.
That&amp;rsquo;s especially useful for an upcoming campaign site where the umbrella
group&amp;rsquo;s site is available in three languages, but (most?) individual group
sites (hosted on subdomains) will only have a subset of languages. Since I live
in a country with four national languages (english isn&amp;rsquo;t one of them, but is
spoken by many!) supporting more than one language, or even many languages is
totally commonplace. It&amp;rsquo;s great that Django has good support for
internationalization. For the sake of an example, I have the following sites:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;example.com&lt;/code&gt;: The default. The host has to match exactly.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;subdomain.example.com&lt;/code&gt;: One individual group&amp;rsquo;s site. The host has to match the regex &lt;code&gt;^subdomain\.&lt;/code&gt; (sorry, I actually do like regexes).&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Overriding configured hosts for local development&lt;/h3&gt;
&lt;p&gt;One thing which always annoyed me when using &lt;code&gt;django.contrib.sites&lt;/code&gt; was that
&amp;ldquo;just&amp;rdquo; pulling the database from production to the local development
environment always produced links pointing back to the remote host instead of
working locally (when producing absolute URLs). This problem was shared by
feincms3-sites as well. I have now found a very ugly but perfectly workable
solution: Overwrite &lt;code&gt;Site.get_host()&lt;/code&gt; locally:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;domain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;example.com&amp;quot;&lt;/span&gt;  &lt;span class="c1"&gt;# Or whatever&lt;/span&gt;
    &lt;span class="n"&gt;_get_host&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="k"&gt;lambda&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;site&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;replace&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;domain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;localhost:8000&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;FEINCMS3_SITES_SITE_GET_HOST&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;_get_host&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This works especially well when using &lt;code&gt;example.com&lt;/code&gt; and maybe subdomains of
&lt;code&gt;example.com&lt;/code&gt;: All absolute links will point to &lt;code&gt;localhost:8000&lt;/code&gt; or
&lt;code&gt;subdomain.localhost:8000&lt;/code&gt;. Since &lt;code&gt;*.localhost&lt;/code&gt; always resolves to the local IP
the browser knows where it should connect to, and since
&lt;code&gt;subdomain.localhost:8000&lt;/code&gt; also matches the &lt;code&gt;^subdomain\.&lt;/code&gt; regex mentioned
above, the site selection logic works as well.&lt;/p&gt;
&lt;p&gt;Of course if you have more domains, not just subdomains, you could adapt the
&lt;code&gt;get_host&lt;/code&gt; override and the relevant regexes to those use cases.&lt;/p&gt;
&lt;h3&gt;Closing words&lt;/h3&gt;
&lt;p&gt;We&amp;rsquo;re at 100% code coverage now when running the test suite. That&amp;rsquo;s really nice.&lt;/p&gt;
&lt;h2&gt;Logging into the Django admin using your Google account&lt;/h2&gt;
&lt;p&gt;This functionality has long been provided by
&lt;a href="https://pypi.org/project/django-authlib/"&gt;django-admin-sso&lt;/a&gt;; however, as
mentioned a long time ago this package still uses a deprecated OAuth2 library.
&lt;a href="https://github.com/matthiask/django-authlib/"&gt;django-authlib&lt;/a&gt; supports using a
Google account to authenticate with the Django admin since 2017. I have now
fixed a small problem with it: If you are logged into a single Google account,
and this account&amp;rsquo;s email address doesn&amp;rsquo;t match the configured admin login rule,
you were out of luck: There was no way to add another account at that time
because the library didn&amp;rsquo;t request the account selection. That has changed now,
if the first login attempt doesn&amp;rsquo;t work, it now explicitly tells Google to let
the user select their Google account. A small quality of life improvement for
those using more than one Google account (voluntarily or not).&lt;/p&gt;
&lt;h2&gt;Releases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3/"&gt;feincms3 4.4.3&lt;/a&gt;: Polished the CKEditor integration a little bit. Re-enabled the source button now that we&amp;rsquo;re back to using the classic iframe-based editor again.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-sites/"&gt;feincms3-sites 0.19.3&lt;/a&gt;: See above.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-authlib/"&gt;django-authlib 0.16.4&lt;/a&gt;: See above.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Weeknotes (2023 week 39)</title><link href="https://406.ch/writing/weeknotes-2023-week-39/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-39/</id><published>2023-09-28T12:00:00Z</published><updated>2023-09-28T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 39)&lt;/h1&gt;&lt;p&gt;Again a few weeks have passed since the last weeknotes entry :-)&lt;/p&gt;
&lt;h2&gt;Moving feincms3 repositories into the feincms organization&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://github.com/feincms"&gt;feincms&lt;/a&gt; GitHub organization has seen more
active days when FeinCMS 1.x was still actively developed. Since my interest
has moved to feincms3 some years ago I haven&amp;rsquo;t kept the organization up to
date. That has changed this week, and I have moved most feincms3-related
repositories into the organization.&lt;/p&gt;
&lt;p&gt;This move doesn&amp;rsquo;t change much though, but it certainly feels more official now.&lt;/p&gt;
&lt;h2&gt;Adding scheduled tests&lt;/h2&gt;
&lt;p&gt;I have started using the cronjob schedule feature of GitHub actions to ensure that tests run at least once a month in a few important projects. I want to get notified of changes in Django@main affecting my packages not only when actively working on them. I try to keep up with Django@main in all packages I maintain.&lt;/p&gt;
&lt;h2&gt;Releases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-sites/"&gt;feincms3-sites 0.18.2&lt;/a&gt;: Many releases in the last weeks. Stopped using permanent redirects in DEBUG mode. Avoid migrations when Django adds more languages. Added utilities which allow restricting model relations to objects in the same site (trickier than it sounds). Added utilities for building full URLs to other sites without taxing the database as much.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-language-sites/"&gt;feincms3-language-sites 0.2.0&lt;/a&gt;: No biggie. No permanent redirects in DEBUG mode anymore.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-cookiecontrol/"&gt;feincms3-cookiecontrol 1.4.5&lt;/a&gt;: Reduced the byte size of the CSS and JavaScript some more. Added spanish translations.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-authlib/"&gt;django-authlib 0.16.3&lt;/a&gt;: I have published a post last week describing the new &lt;a href="https://406.ch/writing/keep-content-managers-admin-access-up-to-date-with-role-based-permissions/"&gt;role-based permissions feature&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-imagefield/"&gt;django-imagefield 0.17&lt;/a&gt;: The &lt;code&gt;process_imagefields&lt;/code&gt; management command now allows specifying globs. If you wanted to prerender all imagefields in the pages app you can use &lt;code&gt;./manage.py process_imagefields pages.*&lt;/code&gt; now instead of listing all image fields&amp;rsquo; labels explicitly.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3/"&gt;feincms3 4.4.1&lt;/a&gt;: I&amp;rsquo;m enormously unhappy but I had to go back to the classic CKEditor instead of using the inline editor. The latter looked much nicer but overriding the Django admin CSS was very very painful. Also, I can totally understand why CKEditor 5 is completely different and why CKEditor 4 is only maintained in a paid LTS plan. It still is making me look for alternatives.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-mptt/"&gt;django-mptt 0.15&lt;/a&gt;: I unfortunately am still using this despite the fact that I have marked it as officially unmaintained since march 2021. I did a mediocre job of making the library run on Django@main again. Parts of the library do not work, but since I&amp;rsquo;m not using them I don&amp;rsquo;t care too much. I&amp;rsquo;m still wondering if someone wants to take over maintenance of the library since it still seems to be actively used in projects of others as well. When I don&amp;rsquo;t have to use django-mptt I&amp;rsquo;m still really happy with &lt;a href="https://406.ch/writing/django-tree-queries/"&gt;django-tree-queries&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/form-designer/"&gt;form-designer 0.22&lt;/a&gt;: This is probably my oldest actively developed project these days. 13 years! (Except for django-content-editor of course.) I have modernized the package, switched to hatchling and put out a new release.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Keep content managers' admin access up-to-date with role-based permissions</title><link href="https://406.ch/writing/keep-content-managers-admin-access-up-to-date-with-role-based-permissions/" rel="alternate" /><id>https://406.ch/writing/keep-content-managers-admin-access-up-to-date-with-role-based-permissions/</id><published>2023-09-20T12:00:00Z</published><updated>2023-09-20T12:00:00Z</updated><summary type="html">&lt;h1&gt;Keep content managers&amp;rsquo; Django admin access up-to-date with role-based permissions&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://docs.djangoproject.com/en/4.2/topics/auth/default/#permissions-and-authorization"&gt;Django&amp;rsquo;s built-in permissions
system&lt;/a&gt;
is great if you want fine-grained control of the permissions content
managers should have. The allowlist-based approach where users have no
permissions by default and must be granted each permission individually makes a
lot of sense to me and is easy to understand.&lt;/p&gt;
&lt;p&gt;When we build a CMS at &lt;a href="https://feinheit.ch/"&gt;Feinheit&lt;/a&gt; we often use the Django administration panel as a CMS.
Unfortunately, Django doesn&amp;rsquo;t provide a way to specify that content managers
should have all permissions in the &lt;code&gt;pages&lt;/code&gt; and &lt;code&gt;articles&lt;/code&gt; app (just as an
example). Adding all current permissions in a particular app is straightforward when using the
&lt;a href="https://docs.djangoproject.com/en/4.2/ref/contrib/admin/#django.contrib.admin.ModelAdmin.filter_horizontal"&gt;&lt;code&gt;filter_horizontal&lt;/code&gt;&lt;/a&gt;
interface but keeping the list up-to-date later isn&amp;rsquo;t. When we add an
additional &lt;a href="https://406.ch/writing/my-reaction-to-the-block-driven-cms-blog-post/"&gt;content block
plugin&lt;/a&gt;
we always have to remember to also update the permissions after deploying the
change &amp;ndash; and often, deployment happens some time after the code has been
written, e.g. because clients want to approve the change first. What happens
all too often is that the manual step of updating permissions gets forgotten.&lt;/p&gt;
&lt;p&gt;This has annoyed me (intermittently) for a long time and my preferred solution
has always been to give superuser permissions to everyone and trust them to
not make changes which they aren&amp;rsquo;t supposed to according to the &lt;em&gt;Trusted Users
Editing Structured Content&lt;/em&gt; principle which was mentioned in a Django book I
read early in my Django journey.&lt;/p&gt;
&lt;h2&gt;The basic ideas of my role-based permissions implementation&lt;/h2&gt;
&lt;p&gt;A recent project has resurfaced this annoyance and I did finally bite the
bullet and implement a solution for this in the form of a
&lt;a href="https://github.com/matthiask/django-authlib/"&gt;django-authlib&lt;/a&gt; extension. The basic ideas are:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;All users are assigned a single role&lt;/strong&gt;: Single roles sound inflexible, but is
good enough for my default use case. Examples for roles could be &lt;em&gt;default&lt;/em&gt; (no
additional permissions granted), &lt;em&gt;content managers&lt;/em&gt; (grant access to the pages
and articles apps) or maybe &lt;em&gt;deny auth&lt;/em&gt; (deny access to users, groups and
permissions).&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The permission check is implemented using a single callable&lt;/strong&gt;: A custom
backend is provided whose only job is to call the correct callable for the
user&amp;rsquo;s current role.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;The callable either returns a boolean or raises &lt;code&gt;PermissionDenied&lt;/code&gt; to prevent
other backends from granting access&lt;/strong&gt;: No new ideas here, it&amp;rsquo;s exactly what
&lt;a href="https://docs.djangoproject.com/en/4.2/topics/auth/customizing/#handling-authorization-in-custom-backends"&gt;Django&amp;rsquo;s authentication backends are supposed to
do&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Permission checkers for the most common scenarios are bundled&lt;/strong&gt;:
django-authlib only ships one permission checker right now, &lt;code&gt;allow_deny_globs&lt;/code&gt;,
which allows specifying a list of permission name globs to allow and to deny.
Deny overrides allow as is probably expected.&lt;/p&gt;
&lt;h2&gt;Using roles in your own project&lt;/h2&gt;
&lt;p&gt;Specify the available roles in your settings and add the authentication backend:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;functools&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;authlib.roles&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;allow_deny_globs&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.utils.translation&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;gettext_lazy&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;

&lt;span class="n"&gt;AUTHLIB_ROLES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;default&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)},&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;staff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;title&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;editorial staff&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;callback&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
            &lt;span class="n"&gt;allow_deny_globs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;pages.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                &lt;span class="s2"&gt;&amp;quot;articles.*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
            &lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;AUTHENTICATION_BACKENDS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;
    &lt;span class="c1"&gt;# This is the necessary additional backend&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;authlib.backends.PermissionsBackend&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# Maybe you want to use authlib&amp;#39;s email authentication ...&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;authlib.backends.EmailBackend&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="c1"&gt;# ... or the standard username &amp;amp; password combination:&lt;/span&gt;
    &lt;span class="s2"&gt;&amp;quot;django.contrib.auth.backends.ModelBackend&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You have to extend your user model (you have to use &lt;a href="https://docs.djangoproject.com/en/4.2/topics/auth/customizing/#specifying-custom-user-model"&gt;a custom user model&lt;/a&gt; if you&amp;rsquo;re not using django-authlib&amp;rsquo;s &lt;code&gt;little_user.User&lt;/code&gt;):&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;authlib.roles&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;RoleField&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;User&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;AbstractUser&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# ...&lt;/span&gt;
    &lt;span class="n"&gt;role&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;RoleField&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that&amp;rsquo;s basically it.&lt;/p&gt;
&lt;p&gt;Of course the globbing is flexible, you could also allow users to view all objects:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allow_deny_globs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*.view_*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Or you could block users from deleting anything:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;partial&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;allow_deny_globs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;deny&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;*.delete_*&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And as mentioned above, you can also combine &lt;code&gt;allow&lt;/code&gt; and &lt;code&gt;deny&lt;/code&gt; (&lt;code&gt;deny&lt;/code&gt; wins
over &lt;code&gt;allow&lt;/code&gt;) or even provide your own callables. If you provide your own
callable it must accept &lt;code&gt;user&lt;/code&gt;, &lt;code&gt;perm&lt;/code&gt; and &lt;code&gt;obj&lt;/code&gt; (which may be &lt;code&gt;None&lt;/code&gt;) as
keyword arguments. Implementing such a callable is probably less work than
implementing an authentication backend yourself; I had to do more work than
initially expected because only implementing &lt;code&gt;.has_perm&lt;/code&gt; isn&amp;rsquo;t sufficient if
you want to see any apps and models in the admin index page. The current
&lt;code&gt;allow_deny_globs&lt;/code&gt; implementation is nice and short:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;allow_deny_globs&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;deny&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;()):&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;deny&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;fnmatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
            &lt;span class="k"&gt;raise&lt;/span&gt; &lt;span class="n"&gt;PermissionDenied&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nb"&gt;any&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fnmatch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;rule&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;allow&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</summary></entry><entry><title>My reaction to the block-driven CMS blog post</title><link href="https://406.ch/writing/my-reaction-to-the-block-driven-cms-blog-post/" rel="alternate" /><id>https://406.ch/writing/my-reaction-to-the-block-driven-cms-blog-post/</id><published>2023-08-23T12:00:00Z</published><updated>2023-08-23T12:00:00Z</updated><summary type="html">&lt;h1&gt;My reaction to the block-driven CMS blog post&lt;/h1&gt;
&lt;p&gt;This morning I read an interesting post on the Lincoln Loop blog called &lt;a href="https://lincolnloop.com/insights/block-driven-cms-is-critical-build-a-future-proof/"&gt;Building a Future-Proof Platform with Block-Driven CMS&lt;/a&gt;. It shouldn&amp;rsquo;t come as a surprise to those (few ðŸ˜„) who know my work in the area of content management systems that the post resonated with me. I found the description of the advantages of block-based CMS editing very clear and I like the emphasis on structuring data well so that it can be reused for multiple distribution channels.&lt;/p&gt;
&lt;p&gt;Of course &lt;a href="https://www.django-cms.org/"&gt;django CMS&lt;/a&gt; isn&amp;rsquo;t the only way to implement a block-driven CMS using Django. Since its inception &lt;a href="https://406.ch/writing/the-future-of-feincms/"&gt;FeinCMS&lt;/a&gt; was always the smaller, faster and nimbler counterpart to it, achieving the same &lt;em&gt;basic&lt;/em&gt; goals with a fraction of the code and maintenance headaches. django CMS always seems to trail the official releases of Django. django-content-editor and feincms3 are almost always compatible with the development version of Django by way of running the tests with the &lt;code&gt;main&lt;/code&gt; branch as well. This allows me to be an early adopter of upcoming Django releases with a software stack that&amp;rsquo;s already well tested, or also to report bugs to the Django project itself. All that probably wouldn&amp;rsquo;t be possible if feincms3 and its dependencies supported all the things django CMS does, but it doesn&amp;rsquo;t have to to be useful.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://406.ch/writing/the-other-future-of-feincms-django-content-editor-and-feincms3/"&gt;django-content-editor and feincms3&lt;/a&gt; are the legacy of FeinCMS in an even smaller, even more maintainable and even more composable package and while I&amp;rsquo;m definitely always checking out other Django-based CMS I&amp;rsquo;m persuaded that sticking with feincms3 is a good choice.&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 33)</title><link href="https://406.ch/writing/weeknotes-2023-week-33/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-33/</id><published>2023-08-20T12:00:00Z</published><updated>2023-08-20T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 33)&lt;/h1&gt;&lt;p&gt;I&amp;rsquo;m not sure if I should call these posts weeknotes when I see the posting schedule, but oh well. Keep expectations up but also practice forgiveness when not meeting them, it&amp;rsquo;s fine really.&lt;/p&gt;
&lt;h2&gt;&lt;code&gt;py_modules&lt;/code&gt; using hatchling&lt;/h2&gt;
&lt;p&gt;I converted &lt;a href="https://github.com/matthiask/speckenv/"&gt;speckenv&lt;/a&gt; and &lt;a href="https://github.com/matthiask/django-sitemaps/"&gt;django-sitemaps&lt;/a&gt; after finding the following very helpful post on packaging projects consisting of Python modules without any packages: &lt;a href="https://www.stefaanlippens.net/single-python-module-packaging-hatch.html"&gt;Packaging of single Python module projects with Hatch/Hatchling&lt;/a&gt;. It&amp;rsquo;s very easy in hindsight, but that&amp;rsquo;s basically always the case.&lt;/p&gt;
&lt;p&gt;The relevant part is including the files in the build:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;[tool.hatch.build]&lt;/span&gt;
&lt;span class="n"&gt;include&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;speckenv.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;speckenv_django.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="w"&gt;  &lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;speckenv_django_patch.py&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s all.&lt;/p&gt;
&lt;h2&gt;django-debug-toolbar and tracing the cause of DB queries in an async world&lt;/h2&gt;
&lt;p&gt;I have also started investigating what would have to be changed in django-debug-toolbar to make it fully support async Django. We currently patch Django&amp;rsquo;s database cursors per thread, which works fine in sync Django land to attribute SQL queries to a particular request/response cycle.&lt;/p&gt;
&lt;p&gt;Since async Django executes DB queries in a thread pool executor and the rest of the work happens inside awaitables (async land) I don&amp;rsquo;t immediately see a way how we could do the same thing. It doesn&amp;rsquo;t seem possible to find out which task spawned another task (without dropping down to C?) but maybe there&amp;rsquo;s something I&amp;rsquo;m overlooking. I hope that someone smarter than me finds a way :-) or that I find the time and motivation to either find a way using Python or using C/Rust/whatever.&lt;/p&gt;
&lt;h2&gt;Releases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-sites/"&gt;feincms3-sites 0.16&lt;/a&gt;: I added basic support for &lt;code&gt;i18n_patterns&lt;/code&gt; when using feincms3-sites with its &lt;code&gt;default_language_middleware&lt;/code&gt; (which allows setting a default language per site in case there is no other mechanism overriding it, such as &lt;code&gt;i18n_patterns&lt;/code&gt;).&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-cookiecontrol/"&gt;feincms3-cookiecontrol 1.4.1&lt;/a&gt;: The privacy policy is now linked inside the banner text instead of adding a link after the text. Looks much nicer.&lt;/li&gt;
&lt;li&gt;&lt;a href="lhttps://pypi.org/project/speckenv/"&gt;speckenv 5.0&lt;/a&gt;: Finally released changes made a long time ago which make one edge case when parsing settings less surprising.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-debug-toolbar/"&gt;django-debug-toolbar 4.2&lt;/a&gt;: I didn&amp;rsquo;t do much work here again, mostly code reviews, some changes to the ruff configuration and general polishing. I also didn&amp;rsquo;t do the release itself, that was handled by Tim. Thanks!&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/FeinCMS/"&gt;FeinCMS 23.8&lt;/a&gt;: Fixes for Pillow 10, and some feincms3 / django-content-editor interoperability improvements which make it easier to reuse plugins/content types.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3/"&gt;feincms3 4.1&lt;/a&gt;: Some basic support for using the apps middleware with async Django. Not documented yet and not deployed anywhere but it basically works. Some documentation edits and changes to the inline CKEditor styling because of the recent changes to Django admin&amp;rsquo;s CSS.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Composition over inheritance: The case for function-based views</title><link href="https://406.ch/writing/composition-over-inheritance-the-case-for-function-based-views/" rel="alternate" /><id>https://406.ch/writing/composition-over-inheritance-the-case-for-function-based-views/</id><published>2023-08-11T12:00:00Z</published><updated>2023-08-11T12:00:00Z</updated><summary type="html">&lt;h1&gt;Composition over inheritance: The case for function-based views&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://hachyderm.io/@matthiask/110814846128940975"&gt;A recent conversation with Carlton on Mastodon&lt;/a&gt; prompted me to write down some of my thoughts re. function- vs class-based views in Django.&lt;/p&gt;
&lt;h2&gt;The early days&lt;/h2&gt;
&lt;p&gt;When I started using Django some time after 0.96 and 1.0 all views were
function based. Except when you added a class with a &lt;code&gt;def __call__()&lt;/code&gt; method
yourself &amp;ndash; that was always possible but not really comparable to today&amp;rsquo;s
class-based views.&lt;/p&gt;
&lt;h2&gt;The introduction of class-based views&lt;/h2&gt;
&lt;p&gt;Class based views (both generic versions and the base &lt;code&gt;View&lt;/code&gt;) were introduced to Django in 2010. Judging from the &lt;a href="https://code.djangoproject.com/ticket/6735"&gt;ticket tracker&lt;/a&gt; the main motivation was to avoid adding yet another argument to the generic function-based views (GFBV) which were available in Django back then.&lt;/p&gt;
&lt;p&gt;The GFBV&amp;rsquo;s argument count was impressive. Two examples follow:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;object_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;object_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;slug_field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;slug&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_name_field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;template_loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;context_processors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_object_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;archive_month&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;month&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;date_field&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;month_format&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;%b&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;template_loader&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;loader&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;extra_context&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow_empty&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;context_processors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="n"&gt;template_object_name&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;object&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;mimetype&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;allow_future&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The GFBVs were immediately deprecated when GCBVs were introduced and later removed in 2012.&lt;/p&gt;
&lt;p&gt;Class-based views have to be adapted by calling the &lt;code&gt;View.as_view()&lt;/code&gt; method; &lt;code&gt;as_view()&lt;/code&gt; returns arguably the thing which is viewed (sorry) as the view by Django, it&amp;rsquo;s the thing which gets called with a request and is expected to return a response. This thing in turn instantiates the view object once per request; this means that &lt;code&gt;self&lt;/code&gt; can be used to save request-specific data such as &lt;code&gt;self.request&lt;/code&gt;, &lt;code&gt;self.args&lt;/code&gt; but also custom attributes.&lt;/p&gt;
&lt;p&gt;The GCBV code is extremely factored and decomposed. The &lt;a href="https://ccbv.co,ul/"&gt;Classy Class-Based Views&lt;/a&gt; site mentions that the &lt;code&gt;UpdateView&lt;/code&gt; has 10 separate ancestors and its code is spread across three files. But, the view code for instantiating a model object and handling a form really isn&amp;rsquo;t that complex. Most of the complexity is handled by Django itself, in the request handler and in the &lt;code&gt;django.forms&lt;/code&gt; package. So, what&amp;rsquo;s the reason for all this?&lt;/p&gt;
&lt;h2&gt;Generic views could be simple&lt;/h2&gt;
&lt;p&gt;I wish that the existing generic views had better building blocks instead of a big hierarchy of mixins and multiple inheritance which is probably not understood by anyone without checking and re-checking the documentation, the code, or the excellent &lt;a href="https://ccbv.co.uk/"&gt;Classy Class-Based Views&lt;/a&gt;. Certainly not by me.&lt;/p&gt;
&lt;p&gt;In my ideal world, generic views would be composed of small reusable and composable functions which wuld cover 80% of use cases with 20% of the code. And if not, you could copy the whole code of the view, change or introduce a line or two and leave it at that. And since the functions do one thing (but do that well) you can immediately see what they are doing and why. You&amp;rsquo;d avoid the Hollywood Principle (Don&amp;rsquo;t call us, we&amp;rsquo;ll call you) in your code. Sure, your view is called by Django but you don&amp;rsquo;t have to introduce more and more layers of indirection.&lt;/p&gt;
&lt;p&gt;The internet is full of advice that you should prefer composition over inheritance. Let&amp;rsquo;s try to outline what generic views could look like if they followed the composition paradigm. Note that the goal isn&amp;rsquo;t to gain points by showing that the resulting code is shorter. One important goal is maintainability by being easier to understand. Another important goal is showing a better path from a beginner&amp;rsquo;s use of views to an experts understanding of everything underneath it by bridging the gap using more powerful building blocks which don&amp;rsquo;t leave all the minutiae to you if the defaults don&amp;rsquo;t work.&lt;/p&gt;
&lt;p&gt;Some repetition caused by copy pasting is fine. Not all identical three lines of code are the same. The &lt;a href="https://wiki.c2.com/?ThreeStrikesAndYouRefactor"&gt;Three Strikes And You Refactor&lt;/a&gt; rule&lt;sup id="fnref:wet"&gt;&lt;a class="footnote-ref" href="#fn:wet"&gt;1&lt;/a&gt;&lt;/sup&gt; leads to better and more maintainable code than following an extreme interpretation of the DRY (Don&amp;rsquo;t Repeat Yourself) principle.&lt;/p&gt;
&lt;h3&gt;ListView and DetailView&lt;/h3&gt;
&lt;p&gt;I&amp;rsquo;m going to profit from Django&amp;rsquo;s shortcuts module and also from &lt;a href="https://feincms3.readthedocs.io/en/latest/ref/shortcuts.html"&gt;feincms3&amp;rsquo;s shortcuts module&lt;/a&gt; which offers functions for rendering pages for single objects or lists of objects. The &lt;code&gt;render_list&lt;/code&gt; and &lt;code&gt;render_detail&lt;/code&gt; functions implement the same way of determining the template paths as the generic views use (for example &lt;code&gt;&amp;lt;app_name&amp;gt;/&amp;lt;model_name&amp;gt;_detail.html&lt;/code&gt;) and the same way of naming context variables (&lt;code&gt;object&lt;/code&gt; and &lt;code&gt;&amp;lt;model_name&amp;gt;&lt;/code&gt; for the object, &lt;code&gt;object_list&lt;/code&gt; and &lt;code&gt;&amp;lt;model_name&amp;gt;_list&lt;/code&gt; for the list) as well as pagination but nothing more.&lt;/p&gt;
&lt;p&gt;Here&amp;rsquo;s a possible minimal implementation of a list and detail object generic view:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# _get_queryset runs ._default_manager.all() on models and returns&lt;/span&gt;
&lt;span class="c1"&gt;# everything else as-is. It&amp;#39;s the secret sauce which allows using models,&lt;/span&gt;
&lt;span class="c1"&gt;# managers or querysets with get_object_or_404 and friends.&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;django.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_get_queryset&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;feincms3.shortcuts&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;render_list&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;render_detail&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;object_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;paginate_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_get_queryset&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;paginate_by&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;paginate_by&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;object_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug_field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;slug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;slug_field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You want to change the way a single object is retrieved? You could do that easily but not by adding configuration-adjacent values in your URLconf but rather by adding a view yourself:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;article_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;articles/&amp;lt;year:int&amp;gt;/&amp;lt;slug:slug&amp;gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;article_detail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=...&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I don&amp;rsquo;t think that was much harder than a hypothetical alternative:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;articles/&amp;lt;year:int&amp;gt;/&amp;lt;slug:slug&amp;gt;/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;object_detail&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;model&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt;
            &lt;span class="s2"&gt;&amp;quot;object_kwargs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;slug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
        &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And think about the internal implementation of the &lt;code&gt;object_detail&lt;/code&gt; view. Viewed one additional feature at a time it may be fine but when adding up everything it would probably be quite gross.&lt;/p&gt;
&lt;p&gt;The additional benefit is that it shows beginners the way to intermediate skills &amp;ndash; writing views isn&amp;rsquo;t hard, and shouldn&amp;rsquo;t be.&lt;/p&gt;
&lt;p&gt;Finally, the official way of overriding &lt;code&gt;DetailView.get_object()&lt;/code&gt; (I think!) doesn&amp;rsquo;t look that good compared to the &lt;code&gt;def article_detail()&lt;/code&gt; view above:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ArticleDetailView&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;generic&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DetailView&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;queryset&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_queryset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;queryset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;year&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;kwargs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;slug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Did you know that &lt;code&gt;get_object()&lt;/code&gt; has an optional queryset argument? I certainly didn&amp;rsquo;t. It seems to be used by the date-based generic views but they also have their own &lt;code&gt;get_object()&lt;/code&gt; implementation so who knows, really.&lt;/p&gt;
&lt;h2&gt;Detail view with additional behavior&lt;/h2&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;article_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;objects&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;published&lt;/span&gt;&lt;span class="p"&gt;(),&lt;/span&gt; &lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;year&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FILES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;CommentForm&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;article&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;.#comments&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;comment_form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A counterexample would be to move the endpoint which accepts a comment POST
request somewhere else. But then you&amp;rsquo;d also have to keep the different
&lt;code&gt;CommentForm&lt;/code&gt; instantiations in sync.&lt;/p&gt;
&lt;p&gt;You could also override &lt;code&gt;get_context_data()&lt;/code&gt; to add the comment form to the
context and override &lt;code&gt;post()&lt;/code&gt; to instantiate check the form&amp;rsquo;s validity. But
then you&amp;rsquo;d have to make sure that an eventual invalid form is handled correctly
by &lt;code&gt;get_context_data()&lt;/code&gt;. It&amp;rsquo;s not hard but it certainly isn&amp;rsquo;t as
straightforward as the example above either.&lt;/p&gt;
&lt;p&gt;The custom view is the most obvious way of keeping the form instantiation in
one place.&lt;/p&gt;
&lt;h2&gt;Form views&lt;/h2&gt;
&lt;p&gt;Generic create and update views could look something like this, again reusing the shortcuts mentioned above:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_and_redirect_to_object&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_form_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;assert&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt; &lt;span class="ow"&gt;or&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Provide at least one of model and form_class&amp;quot;&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="ow"&gt;is&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;form_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;modelform_factory&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POST&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;FILES&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;method&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;POST&amp;quot;&lt;/span&gt; &lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;object_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;save_and_redirect_to_object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_form_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;template_name_suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;object_update&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;slug_field&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;slug&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;save_and_redirect_to_object&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_object_or_404&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="n"&gt;slug_field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;slug&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;get_form_instance&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;model&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="vm"&gt;__class__&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;form_class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;is_valid&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;render_detail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt; &lt;span class="n"&gt;template_name_suffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;_form&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You want to redirect to a different URL and maybe emit a success message? Easy:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;article_form_valid&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="n"&gt;messages&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;success&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Successfully updated the article.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;articles:list&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;urlpatterns&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;
        &lt;span class="s2"&gt;&amp;quot;&amp;lt;slug:slug&amp;gt;/update/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="n"&gt;object_update&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;model&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Article&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;form_valid&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;article_form_valid&lt;/span&gt;&lt;span class="p"&gt;},&lt;/span&gt;
        &lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;=...&lt;/span&gt;
    &lt;span class="p"&gt;),&lt;/span&gt;
    &lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yes, these generic views wouldn&amp;rsquo;t allow overriding the case when a form was invalid. But, I&amp;rsquo;d assume that displaying the form with error messages is the right thing to do in 90% of the cases. And if not, write your own specific or generic view? After all, with the mentioned tools it won&amp;rsquo;t take up more than a few lines of straightforward code. (If the code was tricky it would be different. But views shouldn&amp;rsquo;t be tricky.)&lt;/p&gt;
&lt;p&gt;Adding more &lt;code&gt;form_valid&lt;/code&gt; handlers should be mostly painless. A few examples inspired by &lt;a href="https://docs.djangoproject.com/en/4.2/topics/class-based-views/generic-editing/"&gt;Django&amp;rsquo;s generic editing documentation&lt;/a&gt;:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;save_and_redirect_to&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;fn&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;fn&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;send_mail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;send_email&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;HttpResponseRedirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;/thanks/&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;set_author_and_save&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;instance&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;created_by&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;request&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
    &lt;span class="nb"&gt;object&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;form&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;save&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;redirect&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You could also couple the form a bit to the request and do something like:&lt;/p&gt;
&lt;div class="chl"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;def process_form(request, form):
    return form.process(request)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Sure, forms probably shouldn&amp;rsquo;t know much about requests. But then, Django is a framework for perfectionists &lt;em&gt;with deadlines&lt;/em&gt; and sometimes practicality beats purity.&lt;/p&gt;
&lt;h2&gt;Date-based generic views&lt;/h2&gt;
&lt;p&gt;I think I would want to offer a few analyzers which allow easily returning a
data structure suitable for rendering links for yearly, monthly, weekly or even
daily (who writes that much?) archives. The &lt;a href="https://docs.djangoproject.com/en/4.2/ref/models/querysets/#dates"&gt;&lt;code&gt;.dates()&lt;/code&gt; queryset
method&lt;/a&gt;
method should be a big help there.&lt;/p&gt;
&lt;p&gt;The archive views themselves are straightforward adaptations of the
&lt;code&gt;object_list&lt;/code&gt; view above.&lt;/p&gt;
&lt;p&gt;It may feel like leaving out the actually hard part but I&amp;rsquo;d have to be
convinced that this is actually a hard problem and not just a problem of making
basically arbitrary choices which people then adapt to and then think that this
is the way things should be since it&amp;rsquo;s the way things are.&lt;/p&gt;
&lt;h2&gt;Wrapping up&lt;/h2&gt;
&lt;p&gt;Some points this post could have made or tried to make are made much better by
Luke Plant in the guide &lt;a href="https://spookylukey.github.io/django-views-the-right-way/"&gt;Django Views - The Right
Way&lt;/a&gt;. I don&amp;rsquo;t
generally think that class-based views never make sense. I also don&amp;rsquo;t think
that people shouldn&amp;rsquo;t use the available tools. I just think that I, myself,
don&amp;rsquo;t want to use them, and I also think that I&amp;rsquo;m still happier with &lt;code&gt;lambda
request: HttpResponseRedirect(...)&lt;/code&gt; than with
&lt;code&gt;generic.RedirectView.as_view(url=...)&lt;/code&gt;. The point isn&amp;rsquo;t to compare the
character count. The point is: Does the &lt;code&gt;RedirectView&lt;/code&gt; cause a permanent or a
temporary redirect? I had to look it up for a long time, and then it changed.
The former is completely obvious.&lt;/p&gt;
&lt;h2&gt;Closing words&lt;/h2&gt;
&lt;p&gt;I know that people have strong opinions. I&amp;rsquo;m not interested in all of them. I&amp;rsquo;m
mostly interested in design critiques and arguments regarding the beginner to
intermediate skills argument. It&amp;rsquo;s fine if CBVs work fine for you, and there&amp;rsquo;s
no need to feel challenged by this post.&lt;/p&gt;
&lt;p&gt;Thanks for reading!&lt;/p&gt;
&lt;div class="footnote"&gt;
&lt;hr /&gt;
&lt;ol&gt;
&lt;li id="fn:wet"&gt;
&lt;p&gt;Also called the WET rule (Write Everything Twice). (Not coined by me.)&amp;#160;&lt;a class="footnote-backref" href="#fnref:wet" title="Jump back to footnote 1 in the text"&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</summary></entry><entry><title>Weeknotes (2023 week 30)</title><link href="https://406.ch/writing/weeknotes-2023-week-30/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-30/</id><published>2023-07-28T12:00:00Z</published><updated>2023-07-28T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes&lt;/h1&gt;
&lt;h2&gt;Async Django&lt;/h2&gt;
&lt;p&gt;I have used &lt;a href="https://channels.readthedocs.io/"&gt;Django Channels&lt;/a&gt; successfully in a few projects from 2017 to 2019. A few months back I have worked with &lt;a href="https://www.starlette.io/"&gt;Starlette&lt;/a&gt;. And now I have finally started digging into using Django itself with an ASGI server, and not just for one or two views but also including the middleware stack etc since I also need authentication, not just an endpoint forwarding requests to a remote server. I have looked at &lt;a href="https://github.com/emmett-framework/granian"&gt;Granian&lt;/a&gt;, an RSGI/ASGI server written in Rust. But for now I am using &lt;a href="https://www.uvicorn.org/"&gt;uvicorn&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Django truly has come a long way but there&amp;rsquo;s much left to do. Django 5.0 is looking great already, but 4.2 misses many pieces still. I am really really glad Django wants to stay backwards compatible but I wish I could wave a magic wand and upgrade everything to async. Adding &lt;code&gt;a&lt;/code&gt; prefixes everywhere for the async version is certainly a good compromise and probably the way to go but it&amp;rsquo;s just not that nice.&lt;/p&gt;
&lt;p&gt;I have been playing around with making &lt;a href="https://feincms3.readthedocs.io/"&gt;feincms3&lt;/a&gt;&amp;rsquo;s applications middleware async compatible because I want the full middleware stack to be async. The code is already released but undocumented and not even mentioned in the changelog. So, feel free to play around with it but it&amp;rsquo;s not supposed to be stable or supported yet.&lt;/p&gt;
&lt;h2&gt;Releases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3/"&gt;feincms3 4.1&lt;/a&gt;: Switched to hatchling and ruff. Updated the feincms3-sites docs. Some async updates mentioned above. A Django 4.2 admin CSS update for the inline CKEditor.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-forms/"&gt;feincms3-forms 0.4&lt;/a&gt;: Switched to hatchling and ruff. Started defining default icons for the form fields &lt;a href="https://django-content-editor.readthedocs.io/"&gt;content editor&lt;/a&gt; plugins.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-ckeditor/"&gt;django-ckeditor 6.7&lt;/a&gt;: I&amp;rsquo;m still maintaining the CKEditor 4 integration for Django even though CKEditor 4 itself isn&amp;rsquo;t supported anymore. Minor updates to the editor itself and Pillow compatibility updates.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-cookiecontrol/"&gt;feincms3-cookiecontrol 1.3.2&lt;/a&gt;: The cookie banner doesn&amp;rsquo;t generate an empty &lt;code&gt;&amp;lt;div class="f3cc"&amp;gt;&lt;/code&gt; element anymore if there&amp;rsquo;s nothing to add inside (e.g. if the user only accepted necessary cookies).&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>How ruff changed my Python programming habits</title><link href="https://406.ch/writing/how-ruff-changed-my-python-programming-habits/" rel="alternate" /><id>https://406.ch/writing/how-ruff-changed-my-python-programming-habits/</id><published>2023-07-26T12:00:00Z</published><updated>2023-07-26T12:00:00Z</updated><summary type="html">&lt;h1&gt;How ruff changed my Python programming habits&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://beta.ruff.rs/"&gt;ruff&lt;/a&gt; isn&amp;rsquo;t just a faster replacement for flake8, isort
and friends.&lt;/p&gt;
&lt;p&gt;With other Python-based formatters and linters there&amp;rsquo;s always a trade off
between development speed (waiting on &lt;code&gt;git commit&lt;/code&gt; is very boring) and
strictness.&lt;/p&gt;
&lt;p&gt;ruff is so fast that enabling additional rules is practically free in terms of
speed; the only question is if those rules lead to better, or maybe just to
more correct and consistent code.&lt;/p&gt;
&lt;p&gt;I have long been using &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt;, and even longer
flake8, black, isort. I have written a piece about &lt;a href="https://406.ch/writing/flake8-and-value-standards/"&gt;flake8 and the value of
standards&lt;/a&gt; almost 9 years
ago and have continued moving in the mentioned direction ever since.&lt;/p&gt;
&lt;p&gt;These days I have enabled a wide variety of rules. I&amp;rsquo;m not sold on all of them
(looking at you, pylint) and I&amp;rsquo;m definitely not of the opinion that rules which
I&amp;rsquo;m not using currently are worthless. I didn&amp;rsquo;t even know most of these rules
before starting to use ruff, and ruff making them easy and painless to use
(without a measureable performance penalty) has certainly lead to me annoying
my coworkers with a growing set of enabled rules.&lt;/p&gt;
&lt;h2&gt;Rules&lt;/h2&gt;
&lt;p&gt;The current ruleset and some justifications for it follows.&lt;/p&gt;
&lt;h3&gt;pyflakes, pycodestyle&lt;/h3&gt;
&lt;p&gt;No justification necessary, really.&lt;/p&gt;
&lt;h3&gt;mccabe&lt;/h3&gt;
&lt;p&gt;I like the cyclomatic complexity checker, but I have relaxed it a bit. I find it very useful to avoid complex code, but some code is totally straightforward (e.g. building a queryset from a wide variety of query parameters) but still has many &lt;code&gt;if&lt;/code&gt; statements. I&amp;rsquo;d rather allow more complexity instead of sprinkling the code with &lt;code&gt;# noqa&lt;/code&gt; statements.&lt;/p&gt;
&lt;h3&gt;isort&lt;/h3&gt;
&lt;p&gt;Sorted imports are great.&lt;/p&gt;
&lt;h3&gt;pep8-naming&lt;/h3&gt;
&lt;p&gt;Mostly great except when it flags Django&amp;rsquo;s migration files. The filenames
always start with numbers and that&amp;rsquo;s obviously not a valid Python module name,
but it&amp;rsquo;s not supposed to be.&lt;/p&gt;
&lt;h3&gt;pyupgrade&lt;/h3&gt;
&lt;p&gt;pyupgrade is totally awesome.&lt;/p&gt;
&lt;h3&gt;flake-2020&lt;/h3&gt;
&lt;p&gt;Avoiding non future-proof uses of &lt;code&gt;sys.version&lt;/code&gt; and &lt;code&gt;sys.version_info&lt;/code&gt; is a good idea, no questions about that.&lt;/p&gt;
&lt;h3&gt;flake8-boolean-trap&lt;/h3&gt;
&lt;p&gt;Sometimes annoying, mostly useful. I don&amp;rsquo;t like that the plugin flags e.g. &lt;code&gt;with_tree_fields(True)&lt;/code&gt; or &lt;code&gt;with_tree_fields(False)&lt;/code&gt; because I don&amp;rsquo;t think this could be possibly misread. But, apart from these edge cases it really is a good idea, especially since keyword-only arguments exist and those aren&amp;rsquo;t flagged by this rule.&lt;/p&gt;
&lt;h3&gt;flake8-bugbear&lt;/h3&gt;
&lt;p&gt;Mostly useful. I have disabled the &lt;code&gt;zip()&lt;/code&gt; without &lt;code&gt;strict=&lt;/code&gt; warning.&lt;/p&gt;
&lt;h3&gt;flake8-comprehensions&lt;/h3&gt;
&lt;p&gt;Checks for unnecessary conversions between generators and lists, sets, tuples or dicts.&lt;/p&gt;
&lt;h3&gt;flake8-django&lt;/h3&gt;
&lt;p&gt;I actually like consistency. I also like flagging &lt;code&gt;fields = "__all__"&lt;/code&gt;, but this check shouldn&amp;rsquo;t trigger in admin &lt;code&gt;ModelForm&lt;/code&gt; classes, really. I probably have to add another entry to &lt;code&gt;[tool.ruff.per-file-ignores]&lt;/code&gt; for this.&lt;/p&gt;
&lt;h3&gt;flake8-pie&lt;/h3&gt;
&lt;p&gt;Quite a random assortment of rules. I like the &lt;code&gt;no-unnecessary-pass&lt;/code&gt; and &lt;code&gt;no-pointless-statements&lt;/code&gt; rules, among others.&lt;/p&gt;
&lt;h3&gt;flake8-simplify&lt;/h3&gt;
&lt;p&gt;Nice simplifications. I&amp;rsquo;m not sure if ternary opeartors are always a plus, especially since they hide the branching from &lt;a href="https://pypi.org/project/coverage/"&gt;coverage&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;flake8-gettext&lt;/h3&gt;
&lt;p&gt;Enormously useful and important. I don&amp;rsquo;t know how many times I have encountered broken code like &lt;code&gt;gettext("Hello {name}".format(name=name))&lt;/code&gt; instead of &lt;code&gt;gettext("Hello {name}").format(name=name)&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;pygrep-hooks&lt;/h3&gt;
&lt;p&gt;Avoids &lt;code&gt;eval()&lt;/code&gt;. Avoids blanket &lt;code&gt;# noqa&lt;/code&gt; rules (always be specific!)&lt;/p&gt;
&lt;h3&gt;pylint&lt;/h3&gt;
&lt;p&gt;I have been using all pylint rules for some time. The pylint refactoring rules (&lt;code&gt;PLR&lt;/code&gt;) did prove to be very annoying so I have reverted to only enabling errors and warnings.&lt;/p&gt;
&lt;p&gt;The two main offenders were PLR0913 (too many arguments) and PLR2004 (magic value comparison). The former would be fine if it would count keyword-only arguments differently; it&amp;rsquo;s certainly a good idea to avoid too many positional parameters, I don&amp;rsquo;t think keyword-only parameters are that bad. The latter is bad because often the magic value is really obvious. If you&amp;rsquo;re writing code for the web you shouldn&amp;rsquo;t have to use constants for the &lt;code&gt;200&lt;/code&gt; or &lt;code&gt;404&lt;/code&gt; status codes; one can assume that they are well known.&lt;/p&gt;
&lt;h3&gt;RUF100&lt;/h3&gt;
&lt;p&gt;Ruff is able to automatically remove &lt;code&gt;# noqa&lt;/code&gt; statements which don&amp;rsquo;t actually silence any warnings. That&amp;rsquo;s a great feature to have.&lt;/p&gt;
&lt;h2&gt;Line length&lt;/h2&gt;
&lt;p&gt;Yes, let&amp;rsquo;s go there. I still don&amp;rsquo;t use longer lines than +/- 80 characters, but
I have disabled all line length warnings these days. I don&amp;rsquo;t want to be warned
because I didn&amp;rsquo;t break a string across lines.&lt;/p&gt;
&lt;h2&gt;Rules I don&amp;rsquo;t like&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;flake8-builtins: Too many boring warnings. I didn&amp;rsquo;t even want to know that
  &lt;code&gt;copyright&lt;/code&gt; is a Python builtin.&lt;/li&gt;
&lt;li&gt;flake8-logging-format: Not generally helpful. Avoiding different exception strings so that e.g. &lt;a href="https://sentry.io/welcome/"&gt;Sentry&lt;/a&gt; can group exceptions more easily is a good idea, but the rule generated so many false positives as to be not useful anymore.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Final words (for now)&lt;/h2&gt;
&lt;p&gt;I really hope that Black is integrated into ruff one day.&lt;/p&gt;
&lt;p&gt;Also, I hope that ESLint and prettier will be replaced by a faster tool. I have my eyes on a few alternatives, but they are not there yet for my use cases.&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 29)</title><link href="https://406.ch/writing/weeknotes-2023-week-29/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-29/</id><published>2023-07-21T12:00:00Z</published><updated>2023-07-21T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes&lt;/h1&gt;
&lt;p&gt;I have mainly done work in private projects this week. Not much to talk about.
Except for the ZIP file &lt;code&gt;content-type&lt;/code&gt; bug which was interesting enough to
justify &lt;a href="https://406.ch/writing/serving-zip-files-using-django/"&gt;its own blog post&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Releases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-cabinet/"&gt;django-cabinet 0.13&lt;/a&gt;: I converted
  the package to use ruff, hatchling; started running CI tests using Python
  3.11. The internals of the Django admin&amp;rsquo;s filters have changed to allow
  multi-valued filters, this has required some changes to the implementation of
  the folder filter. I opted to using a relatively ugly &lt;code&gt;django.VERSION&lt;/code&gt;
  hack; but that&amp;rsquo;s not too bad since such branches will be automatically
  removed by the awesome
  &lt;a href="https://github.com/adamchainz/django-upgrade"&gt;django-upgrade&lt;/a&gt;. I would have
  tried finding other ways in the past but now that old compatibility code can
  be removed by a single run of &lt;code&gt;django-upgrade&lt;/code&gt; (respectively
  &lt;code&gt;pre-commit&lt;/code&gt;) there really is no point to doing it in a different way.&lt;/li&gt;
&lt;/ul&gt;</summary></entry><entry><title>Serving ZIP files using Django</title><link href="https://406.ch/writing/serving-zip-files-using-django/" rel="alternate" /><id>https://406.ch/writing/serving-zip-files-using-django/</id><published>2023-07-18T12:00:00Z</published><updated>2023-07-18T12:00:00Z</updated><summary type="html">&lt;h1&gt;Serving ZIP files using Django&lt;/h1&gt;
&lt;p&gt;I have generated ZIP files on the fly and served them using Django for a time.
Serving ZIP files worked well until it didn&amp;rsquo;t and browsing StackOverflow etc.
didn&amp;rsquo;t produce clear answers either. The development server worked fine, but
gunicorn/nginx didn&amp;rsquo;t.&lt;/p&gt;
&lt;p&gt;In the end, I had to change &lt;code&gt;content_type="application/zip"&lt;/code&gt; to
&lt;code&gt;content_type="application/x-zip-compressed"&lt;/code&gt;. I still don&amp;rsquo;t know what changed
and I have only theories why that&amp;rsquo;s necessary, but maybe it helps someone else.
Sometimes it&amp;rsquo;s better to be dumber about it.&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 28)</title><link href="https://406.ch/writing/weeknotes-2023-week-28/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-28/</id><published>2023-07-12T12:00:00Z</published><updated>2023-07-12T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 28)&lt;/h1&gt;&lt;h2&gt;Releases&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/html-sanitizer/"&gt;html-sanitizer 2.2&lt;/a&gt;: Made the
  sanitizer&amp;rsquo;s configuration initialization more strict. Strings cannot be used
  anymore in places where the sanitizer expects a set (resp. any iterable).
  It&amp;rsquo;s useful that strings are iterable in Python and I wouldn&amp;rsquo;t want to change
  that, but the fact that &lt;code&gt;("class")&lt;/code&gt; is a string and not a tuple makes me sad.
  The fact that tuples are created by &lt;code&gt;,&lt;/code&gt; and not by &lt;code&gt;()&lt;/code&gt; will always trip up
  people.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-language-sites/"&gt;feincms3-language-sites
  0.1&lt;/a&gt;: The version number
  is wrong but whatever. I&amp;rsquo;m certainly happy with the state of things. The big
  change in 0.1 is that &lt;code&gt;Page.get_absolute_url&lt;/code&gt; no longer generates
  protocol-relative URLs. Depending on the value of &lt;code&gt;SECURE_SSL_REDIRECT&lt;/code&gt; it
  automatically prepends either &lt;code&gt;http:&lt;/code&gt; or &lt;code&gt;https:&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-authlib/"&gt;django-authlib 0.15&lt;/a&gt;:
  django-authlib&amp;rsquo;s admin Single Sign On module now supports a hook to
  automatically create staff users when a matching user doesn&amp;rsquo;t exist already.
  I don&amp;rsquo;t plan to use this functionality myself and I have recommended people
  to implement the functionality themselves using the tools in django-authlib
  if they need it, but the change was so small and well-contained that adding
  it to the core made sense to me.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;pipx inject&lt;/h2&gt;
&lt;p&gt;We learned that &lt;a href="https://pypa.github.io/pipx/"&gt;pipx&lt;/a&gt; seems to remember injected
packages even across &lt;code&gt;pipx reinstall&lt;/code&gt; invocations. Not too surprising now that
we know it, but we certainly spent some time scratching our heads. &lt;code&gt;pipx
uninject&lt;/code&gt; was the thing we needed to stop pipx from installing an old version
of a dependency instead of the one being specified in &lt;code&gt;pyproject.toml&lt;/code&gt;.&lt;/p&gt;
&lt;h2&gt;hatchling and data files&lt;/h2&gt;
&lt;p&gt;I&amp;rsquo;m very confused by the way &lt;a href="https://hatch.pypa.io/"&gt;hatchling&lt;/a&gt; sometimes
includes data files and sometimes it doesn&amp;rsquo;t. I had to add &lt;code&gt;[tool.hatch.build]
include=["authlib/"]&lt;/code&gt; to &lt;a href="https://github.com/matthiask/django-authlib/commit/67d4673e4039eac277b5d2557c0736c1f01442ac"&gt;django-authlib&amp;rsquo;s &lt;code&gt;pyproject.toml&lt;/code&gt;
file&lt;/a&gt;
to make it include HTML files from subpackages. Maybe the subpackages are the
reason, but I&amp;rsquo;m not sure.&lt;/p&gt;
&lt;h2&gt;Payment providers that must not be named&lt;/h2&gt;
&lt;p&gt;I have spent hours and hours battling with the badly documented, incomplete,
inconsistent and confusing API of a (not that well known) payment provider
based in Switzerland. I&amp;rsquo;m surprised that this still happens years and years
after Stripe started offering a really well thought out and documented API
geared towards programmers. It&amp;rsquo;s really sad because when the same structure is
named with differing naming conventions (e.g. &lt;code&gt;snake_case&lt;/code&gt; vs. &lt;code&gt;camelCase&lt;/code&gt;) in
different parts of the API you just know that somebody spent too much time
writing too much code instead of reusing already existing functionality.&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 26)</title><link href="https://406.ch/writing/weeknotes-2023-week-26/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-26/</id><published>2023-06-30T12:00:00Z</published><updated>2023-06-30T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 26)&lt;/h1&gt;&lt;h2&gt;Releases&lt;/h2&gt;
&lt;p&gt;I released updates to a few of my packages; I have continued converting packages to &lt;a href="https://hatch.pypa.io"&gt;hatchling&lt;/a&gt; and &lt;a href="https://github.com/astral-sh/ruff"&gt;ruff&lt;/a&gt; while doing that.&lt;/p&gt;
&lt;p&gt;New releases in the last two weeks include:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-tree-queries/"&gt;django-tree-queries 0.15&lt;/a&gt;: Added a new function, &lt;code&gt;.without_tree_fields()&lt;/code&gt; to the queryset which can be used to avoid the &lt;code&gt;.with_tree_fields(False)&lt;/code&gt; boolean trap warning.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-cookiecontrol/"&gt;feincms3-cookiecontrol 1.3.1&lt;/a&gt;: This small update allows replacing the feincms3 &lt;a href="https://noembed.com"&gt;noembed.com&lt;/a&gt; oEmbed code using other libraries such as &lt;a href="https://github.com/coleifer/micawber/"&gt;micawber&lt;/a&gt; which support a wider range of URLs while still gating the embed behind users&amp;rsquo; explicit consent.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/feincms3-downloads/"&gt;feincms3-downloads 0.5.3&lt;/a&gt;: Updated translations.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-ckeditor/"&gt;django-ckeditor 6.6.1&lt;/a&gt;: Updated the bundled CKEditor 4 and merged a pull request adding better integration with Django admin&amp;rsquo;s dark mode.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/django-js-asset/"&gt;django-js-asset 2.1&lt;/a&gt;: Just basic maintainability and packaging updates. The &lt;code&gt;JS()&lt;/code&gt; implementation itself is untouched since February 2022.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://pypi.org/project/html-sanitizer/"&gt;html-sanitizer 2.0&lt;/a&gt;: Not really a backwards incompatible change (at least not according to the tests); I just wanted to avoid &lt;code&gt;1.10&lt;/code&gt; and go directly to &lt;code&gt;2.0&lt;/code&gt; this time.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;GitHub projects&lt;/h2&gt;
&lt;p&gt;We are using GitHub project boards more and more. It definitely isn&amp;rsquo;t the most versatile way of managing projects but it sort-of hits the sweet spot for us. I&amp;rsquo;m mostly happy with it, and it seems to me that applying &lt;a href="https://en.wikipedia.org/wiki/Rule_of_least_power"&gt;the rule of least power&lt;/a&gt; to project management software may not be such a bad idea after all.&lt;/p&gt;
&lt;p&gt;The built-in workflows are a bit boring and limited; especially the fact that it seems impossible to automatically add issues to the project when using multiple repositories. Luckily, &lt;a href="https://github.com/actions/add-to-project"&gt;actions/add-to-project&lt;/a&gt; exists so that&amp;rsquo;s not really a big problem.&lt;/p&gt;
&lt;h2&gt;To cloud or not&lt;/h2&gt;
&lt;p&gt;I had a long discussion with a colleague about containerization, Kubernetes, self-hosting, etc. etc. and I still don&amp;rsquo;t know where I stand. I can honestly say that the old way of hosting (ca. 2010) still works fine. I worry about the deterioriation of service quality we&amp;rsquo;re seeing and sometimes I really would like to have root to apply quick fixes where now I have to jump to hoops just to get what I already know I need. Annoying. But migrations are annoying as well.&lt;/p&gt;
&lt;h2&gt;Scheduled publishing&lt;/h2&gt;
&lt;p&gt;I augmented the script generating this website with scheduled publishing support while again reducing the number of lines in the file. The code is still formatted using black and ruff, while only ignoring line-length errors (I do this everywhere now to avoid breaking up long strings, not to put much code onto single lines) and allowing named lambdas. The weeknotes from two weeks ago where published by GitHub actions&amp;rsquo; cron scheduling support.&lt;/p&gt;
&lt;h2&gt;I like programming more than writing (even though I like writing)&lt;/h2&gt;
&lt;p&gt;I notice that writing is the first thing I start skipping when I have to
prioritize. Programming, biking, gardening come first. That&amp;rsquo;s fine, really. But
I&amp;rsquo;m still a bit sad that I do not manage to at least put out a short weekly
weeknotes entry.&lt;/p&gt;</summary></entry><entry><title>FeinCMS is a dead end (but feincms3 is not)</title><link href="https://406.ch/writing/feincms-is-a-dead-end-but-feincms3-is-not/" rel="alternate" /><id>https://406.ch/writing/feincms-is-a-dead-end-but-feincms3-is-not/</id><published>2023-06-19T12:00:00Z</published><updated>2023-06-19T12:00:00Z</updated><summary type="html">&lt;h1&gt;FeinCMS is a dead end (but feincms3 is not)&lt;/h1&gt;
&lt;p&gt;I wouldn&amp;rsquo;t encourage people to start new sites with FeinCMS. Five years ago I wrote that &lt;a href="https://406.ch/writing/the-future-of-feincms/"&gt;FeinCMS is used in a few flagship projects which weâ€™re still actively developing, which means that FeinCMS wonâ€™t be going away for years to come.&lt;/a&gt; That&amp;rsquo;s still true but less and less so. We&amp;rsquo;re actively moving away from FeinCMS where we can, mostly towards feincms3 and django-content-editor.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://406.ch/writing/the-other-future-of-feincms-django-content-editor-and-feincms3/"&gt;FeinCMS lives on in django-content-editor and feincms3&lt;/a&gt;; not only in spirit but also in (code) history, since django-content-editor contains the whole history of FeinCMS up to and including the beginning of 2016.&lt;/p&gt;
&lt;p&gt;The implementation of FeinCMS is too expensive to clean up without breaking backwards compatibility. I still wish I had pursued an incremental way back then which would have allowed us to evolve old projects to the current best way of doing things (tm), but it didn&amp;rsquo;t happen and I&amp;rsquo;m not shedding too many tears about that since I&amp;rsquo;m quite happy with where we&amp;rsquo;re at today.&lt;/p&gt;
&lt;p&gt;That basically means that I won&amp;rsquo;t put any effort into &lt;a href="https://406.ch/writing/bringing-feincms-and-django-content-editorfeincms3-closer-together/"&gt;bringing FeinCMS and django-content-editor closer together&lt;/a&gt;. I haven&amp;rsquo;t spent much time on that anyway but now my mind is made up that this wouldn&amp;rsquo;t be time well spent. That being said, some of the items mentioned in the blog post linked above are available in django-content-editor now.&lt;/p&gt;</summary></entry><entry><title>Weeknotes (2023 week 24)</title><link href="https://406.ch/writing/weeknotes-2023-week-24/" rel="alternate" /><id>https://406.ch/writing/weeknotes-2023-week-24/</id><published>2023-06-16T12:00:00Z</published><updated>2023-06-16T12:00:00Z</updated><summary type="html">&lt;h1&gt;Weeknotes (2023 week 24)&lt;/h1&gt;&lt;p&gt;Life happened and I missed a month of weeknotes. Oh well.&lt;/p&gt;
&lt;h2&gt;django-debug-toolbar 4.1&lt;/h2&gt;
&lt;p&gt;We have released &lt;a href="https://pypi.org/project/django-debug-toolbar/"&gt;django-debug-toolbar
4.1&lt;/a&gt;. Another cycle where I
mostly contributed reviews and not much else. Feels great :-)&lt;/p&gt;
&lt;h2&gt;Going all in on hatch and hatchling&lt;/h2&gt;
&lt;p&gt;I got to know hatch because django-debug-toolbar was converted to it. I was
confused as probably anyone else with the new state of packaging in Python
world. After listening to a few Podcasts (for example &lt;a href="https://talkpython.fm/episodes/show/408/hatch-a-modern-python-workflow"&gt;Hatch: A Modern Python
Workflow&lt;/a&gt;)
I did bite the bullet and started converting projects to hatch as mentioned
&lt;a href="https://406.ch/writing/weeknotes-2023-week-13-and-14/"&gt;some time ago&lt;/a&gt;. I have
converted a few other projects in the meantime because the development
experience is nicer. Not much, but enough to make it worthwile.
&lt;a href="https://pypi.org/project/feincms3-sites/"&gt;feincms3-sites&lt;/a&gt; is the latest
package I converted.&lt;/p&gt;
&lt;h2&gt;CKEditor 5&amp;rsquo;s new license and django-ckeditor&lt;/h2&gt;
&lt;p&gt;The pressure is on to maybe switch away from CKEditor 4 since it probably will not be supported after &lt;a href="https://support.ckeditor.com/hc/en-us/articles/115005281629-How-long-will-CKEditor-4-be-supported-"&gt;June 2023&lt;/a&gt;. It&amp;rsquo;s totally understandable that the CKEditor 5 license isn&amp;rsquo;t the same as before, but I&amp;rsquo;m not sure what that means for the Django integration &lt;a href="https://github.com/django-ckeditor/django-ckeditor/issues/482"&gt;django-ckeditor&lt;/a&gt; which I&amp;rsquo;m maintaining since a few years. I don&amp;rsquo;t actually like the new capabilities of CKEditor all that much and don&amp;rsquo;t intend to use them; maybe it would be better to use a build of &lt;a href=""&gt;ProseMirror&lt;/a&gt; in the CMS since &lt;a href="https://django-content-editor.readthedocs.io/en/latest/#about-rich-text-editors"&gt;we&amp;rsquo;re intentionally only using a very small subset of the features most rich text editors offer&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Mountain biking.&lt;/h2&gt;
&lt;p&gt;My mountain bike is repaired, I&amp;rsquo;m back on the trail.&lt;/p&gt;</summary></entry></feed>