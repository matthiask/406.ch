<?xml version='1.0' encoding='utf-8'?>
<feed xml:lang="en" xmlns="http://www.w3.org/2005/Atom"><title>Matthias Kestenholz: Posts about Python</title><link href="https://406.ch/writing/category-python/atom.xml" rel="self" /><link href="https://406.ch/writing/category-python/" rel="alternate" /><id>https://406.ch/writing/category-python/</id><updated>2023-07-26T12:00:00Z</updated><author><name>Matthias Kestenholz</name></author><entry><title>How ruff changed my Python programming habits</title><link href="https://406.ch/writing/how-ruff-changed-my-python-programming-habits/" rel="alternate" /><id>https://406.ch/writing/how-ruff-changed-my-python-programming-habits/</id><published>2023-07-26T12:00:00Z</published><updated>2023-07-26T12:00:00Z</updated><summary type="html">&lt;h1&gt;How ruff changed my Python programming habits&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://beta.ruff.rs/"&gt;ruff&lt;/a&gt; isn&amp;rsquo;t just a faster replacement for flake8, isort
and friends.&lt;/p&gt;
&lt;p&gt;With other Python-based formatters and linters there&amp;rsquo;s always a trade off
between development speed (waiting on &lt;code&gt;git commit&lt;/code&gt; is very boring) and
strictness.&lt;/p&gt;
&lt;p&gt;ruff is so fast that enabling additional rules is practically free in terms of
speed; the only question is if those rules lead to better, or maybe just to
more correct and consistent code.&lt;/p&gt;
&lt;p&gt;I have long been using &lt;a href="https://pre-commit.com/"&gt;pre-commit&lt;/a&gt;, and even longer
flake8, black, isort. I have written a piece about &lt;a href="https://406.ch/writing/flake8-and-value-standards/"&gt;flake8 and the value of
standards&lt;/a&gt; almost 9 years
ago and have continued moving in the mentioned direction ever since.&lt;/p&gt;
&lt;p&gt;These days I have enabled a wide variety of rules. I&amp;rsquo;m not sold on all of them
(looking at you, pylint) and I&amp;rsquo;m definitely not of the opinion that rules which
I&amp;rsquo;m not using currently are worthless. I didn&amp;rsquo;t even know most of these rules
before starting to use ruff, and ruff making them easy and painless to use
(without a measureable performance penalty) has certainly lead to me annoying
my coworkers with a growing set of enabled rules.&lt;/p&gt;
&lt;h2&gt;Rules&lt;/h2&gt;
&lt;p&gt;The current ruleset and some justifications for it follows.&lt;/p&gt;
&lt;h3&gt;pyflakes, pycodestyle&lt;/h3&gt;
&lt;p&gt;No justification necessary, really.&lt;/p&gt;
&lt;h3&gt;mccabe&lt;/h3&gt;
&lt;p&gt;I like the cyclomatic complexity checker, but I have relaxed it a bit. I find it very useful to avoid complex code, but some code is totally straightforward (e.g. building a queryset from a wide variety of query parameters) but still has many &lt;code&gt;if&lt;/code&gt; statements. I&amp;rsquo;d rather allow more complexity instead of sprinkling the code with &lt;code&gt;# noqa&lt;/code&gt; statements.&lt;/p&gt;
&lt;h3&gt;isort&lt;/h3&gt;
&lt;p&gt;Sorted imports are great.&lt;/p&gt;
&lt;h3&gt;pep8-naming&lt;/h3&gt;
&lt;p&gt;Mostly great except when it flags Django&amp;rsquo;s migration files. The filenames
always start with numbers and that&amp;rsquo;s obviously not a valid Python module name,
but it&amp;rsquo;s not supposed to be.&lt;/p&gt;
&lt;h3&gt;pyupgrade&lt;/h3&gt;
&lt;p&gt;pyupgrade is totally awesome.&lt;/p&gt;
&lt;h3&gt;flake-2020&lt;/h3&gt;
&lt;p&gt;Avoiding non future-proof uses of &lt;code&gt;sys.version&lt;/code&gt; and &lt;code&gt;sys.version_info&lt;/code&gt; is a good idea, no questions about that.&lt;/p&gt;
&lt;h3&gt;flake8-boolean-trap&lt;/h3&gt;
&lt;p&gt;Sometimes annoying, mostly useful. I don&amp;rsquo;t like that the plugin flags e.g. &lt;code&gt;with_tree_fields(True)&lt;/code&gt; or &lt;code&gt;with_tree_fields(False)&lt;/code&gt; because I don&amp;rsquo;t think this could be possibly misread. But, apart from these edge cases it really is a good idea, especially since keyword-only arguments exist and those aren&amp;rsquo;t flagged by this rule.&lt;/p&gt;
&lt;h3&gt;flake8-bugbear&lt;/h3&gt;
&lt;p&gt;Mostly useful. I have disabled the &lt;code&gt;zip()&lt;/code&gt; without &lt;code&gt;strict=&lt;/code&gt; warning.&lt;/p&gt;
&lt;h3&gt;flake8-comprehensions&lt;/h3&gt;
&lt;p&gt;Checks for unnecessary conversions between generators and lists, sets, tuples or dicts.&lt;/p&gt;
&lt;h3&gt;flake8-django&lt;/h3&gt;
&lt;p&gt;I actually like consistency. I also like flagging &lt;code&gt;fields = "__all__"&lt;/code&gt;, but this check shouldn&amp;rsquo;t trigger in admin &lt;code&gt;ModelForm&lt;/code&gt; classes, really. I probably have to add another entry to &lt;code&gt;[tool.ruff.per-file-ignores]&lt;/code&gt; for this.&lt;/p&gt;
&lt;h3&gt;flake8-pie&lt;/h3&gt;
&lt;p&gt;Quite a random assortment of rules. I like the &lt;code&gt;no-unnecessary-pass&lt;/code&gt; and &lt;code&gt;no-pointless-statements&lt;/code&gt; rules, among others.&lt;/p&gt;
&lt;h3&gt;flake8-simplify&lt;/h3&gt;
&lt;p&gt;Nice simplifications. I&amp;rsquo;m not sure if ternary opeartors are always a plus, especially since they hide the branching from &lt;a href="https://pypi.org/project/coverage/"&gt;coverage&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;flake8-gettext&lt;/h3&gt;
&lt;p&gt;Enormously useful and important. I don&amp;rsquo;t know how many times I have encountered broken code like &lt;code&gt;gettext("Hello {name}".format(name=name))&lt;/code&gt; instead of &lt;code&gt;gettext("Hello {name}").format(name=name)&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;pygrep-hooks&lt;/h3&gt;
&lt;p&gt;Avoids &lt;code&gt;eval()&lt;/code&gt;. Avoids blanket &lt;code&gt;# noqa&lt;/code&gt; rules (always be specific!)&lt;/p&gt;
&lt;h3&gt;pylint&lt;/h3&gt;
&lt;p&gt;I have been using all pylint rules for some time. The pylint refactoring rules (&lt;code&gt;PLR&lt;/code&gt;) did prove to be very annoying so I have reverted to only enabling errors and warnings.&lt;/p&gt;
&lt;p&gt;The two main offenders were PLR0913 (too many arguments) and PLR2004 (magic value comparison). The former would be fine if it would count keyword-only arguments differently; it&amp;rsquo;s certainly a good idea to avoid too many positional parameters, I don&amp;rsquo;t think keyword-only parameters are that bad. The latter is bad because often the magic value is really obvious. If you&amp;rsquo;re writing code for the web you shouldn&amp;rsquo;t have to use constants for the &lt;code&gt;200&lt;/code&gt; or &lt;code&gt;404&lt;/code&gt; status codes; one can assume that they are well known.&lt;/p&gt;
&lt;h3&gt;RUF100&lt;/h3&gt;
&lt;p&gt;Ruff is able to automatically remove &lt;code&gt;# noqa&lt;/code&gt; statements which don&amp;rsquo;t actually silence any warnings. That&amp;rsquo;s a great feature to have.&lt;/p&gt;
&lt;h2&gt;Line length&lt;/h2&gt;
&lt;p&gt;Yes, let&amp;rsquo;s go there. I still don&amp;rsquo;t use longer lines than +/- 80 characters, but
I have disabled all line length warnings these days. I don&amp;rsquo;t want to be warned
because I didn&amp;rsquo;t break a string across lines.&lt;/p&gt;
&lt;h2&gt;Rules I don&amp;rsquo;t like&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;flake8-builtins: Too many boring warnings. I didn&amp;rsquo;t even want to know that
  &lt;code&gt;copyright&lt;/code&gt; is a Python builtin.&lt;/li&gt;
&lt;li&gt;flake8-logging-format: Not generally helpful. Avoiding different exception strings so that e.g. &lt;a href="https://sentry.io/welcome/"&gt;Sentry&lt;/a&gt; can group exceptions more easily is a good idea, but the rule generated so many false positives as to be not useful anymore.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Final words (for now)&lt;/h2&gt;
&lt;p&gt;I really hope that Black is integrated into ruff one day.&lt;/p&gt;
&lt;p&gt;Also, I hope that ESLint and prettier will be replaced by a faster tool. I have my eyes on a few alternatives, but they are not there yet for my use cases.&lt;/p&gt;</summary></entry></feed>